openapi: 3.0.0
info:
  description: Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous
    and connected vehicle test facilities/cities.
  version: 0.0.12
  title: McityOS - OCTANE API
  contact:
    name: API support
    email: mcity-engineering@umich.edu
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
- url: /api
  description: Octane API Endpoint
security:
- APIKeyHeader: []
tags:
- name: Facility
  description: Information about the facility Mcity
  externalDocs:
    description: Discover Mcity
    url: https://mcity.umich.edu
- name: Intersections
  description: Management of intersections
  externalDocs:
    description: Mcity's intersections
- name: Signals
  description: Management of traffic signals
  externalDocs:
    description: Mcity's traffic signals
- name: Rail
  description: Management of rail crossings.
  externalDocs:
    description: Discover Mcity's rail service
- name: Crosswalks
  description: Management of crosswalks
  externalDocs:
    description: Mcity's crosswalks
- name: Gates
  description: Control of facility gates
  externalDocs:
    description: Mcity's gates
- name: Garages
  description: Control of facility garage bays
  externalDocs:
    description: Mcity's Garages
- name: Lights
  description: Control and enumeration of lighting
  externalDocs:
    description: Mcity's Lights
- name: Safety
  description: Management of safety equipment
  externalDocs:
    description: Mcity's safety equipment
- name: Maintenance
  description: Maintenance equipment - internal devices to maintain the facility
  externalDocs:
    description: Mcity's maintenance equipment
    url: https://members.um.city/wiki/track/maintenance
- name: Sensors
  description: Raw sensor feed, enumeration, and control
  externalDocs:
    description: Mcity's sensors
- name: Weather
  description: Weather alert and weather data feed
  externalDocs:
    description: Weather
- name: V2X
  description: V2X RSU and OBU management, near real time messages available via WebSocket
  externalDocs:
    description: V2X Technology
- name: Scenarios
  description: Management of test case scenarios
  externalDocs:
    description: Save, restore, and run test case scripts to setup a facility in a
      specific way and trigger on events.
    url: https://mcity.umich.edu
- name: Robots
  description: Information about OCTANE configured robots
  externalDocs:
    description: Discover Mcity
    url: https://mcity.umich.edu
- name: Requests
  description: Information about current requests
  externalDocs:
    description: Mcity's requests
    url: https://members.um.city/wiki/track/requests
- name: Sessions
  description: Manage active user sessions, session logging, and session notification.
  externalDocs:
    description: Mcity Scheduling
    url: https://scheduling.umich.edu
paths:
  /garages:
    x-octane-tag:
    - Garages
    get:
      tags:
      - Garages
      summary: Return a list of garages
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  garages:
                    type: array
                    description: A list of garages
                    items:
                      $ref: '#/components/schemas/Garage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /garage/{id}:
    x-octane-tag:
    - Garages
    parameters:
    - in: path
      name: id
      required: true
      description: A garage ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Garages
      summary: Return a garage object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  garage:
                    $ref: '#/components/schemas/Garage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Garages
      summary: Allows control of a garage.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Allows control to state of a specific garage state
                  type: object
                  properties:
                    open:
                      type: boolean
                      description: Default is false, set to true to open the door.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/garage:
    x-octane-tag:
    - Garages
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing garage_* events.
      responses:
        200:
          description: Join of Channel
  /octane/garage_update:
    x-octane-tag:
    - Garages
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of a garage is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Garage update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this light fixture.
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/GarageState'
  /octane/garage_request:
    x-octane-tag:
    - Garages
    get:
      tags:
      - WebSockets-Events
      summary: Event published when request to change state was made on this garage.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Garage'
  /lights:
    x-octane-tag:
    - Lights
    get:
      tags:
      - Lights
      summary: Return a list of light objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lights:
                    type: array
                    description: A list of Lights
                    items:
                      $ref: '#/components/schemas/Light'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Lights
      summary: Sets features on all configured lights that support a feature.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Default is 0. 1 causes the light to turn on.
                    dimLevel:
                      type: integer
                      description: Default is 0. > 0 setting toggles the dim percentage
                        of the light.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestIDs:
                    type: array
                    description: Work request IDs
                    items:
                      type: string
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /light/{id}:
    x-octane-tag:
    - Lights
    parameters:
    - in: path
      name: id
      required: true
      description: A light ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Lights
      summary: Return a light object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  light:
                    $ref: '#/components/schemas/Light'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Lights
      summary: Allows control to a light.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Allows control to state of a specific light.
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Default is 0. 1 causes the light to turn on.
                    dimLevel:
                      type: integer
                      description: Default is 0. > 0 setting toggles the dim percentage
                        of the light.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/light:
    x-octane-tag:
    - Lights
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing light_* events.
      responses:
        200:
          description: Join of Channel
  /octane/light_update:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of a light is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Light update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this light fixture.
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/LightState'
  /octane/light_request:
    x-octane-tag:
    - Lights
    get:
      tags:
      - WebSockets-Events
      summary: Event published when request to change state was made on this light.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Light'
  /intersections:
    x-octane-tag:
    - Intersections
    get:
      tags:
      - Intersections
      summary: Return a list of intersection objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  intersections:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Intersection'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Intersections
      summary: Sets features on all configured intersections that support a feature.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    reset:
                      type: boolean
                      description: Request a reset of the timing on all traffic controllers.
                        Reset is performed before other items in this request.
                    enabled:
                      type: boolean
                      description: Request the signal heads for this intersection
                        be switched on or off. This does not shut off the controller.
                    flash:
                      type: boolean
                      description: Toggles the intersections between all way flash
                        and a free timed mode.
                    timePaused:
                      type: boolean
                      description: Pause or un-pause ring time of this intersection.
                        Causes all lights to freeze in current state when set True.
                    timeClearControl:
                      type: integer
                      description: Default is 0 - disabled. > 0 setting causes control
                        commands to be automatically cleared this input number of
                        seconds.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestIDs:
                    type: array
                    description: Work request IDs
                    items:
                      type: string
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Intersections
      summary: Return an intersection object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  intersection:
                    $ref: '#/components/schemas/Intersection'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Intersections
      summary: Allows control one to many phases within an intersection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: 'All values are bit strings presenting phases 1-8 in
                    descending order. Phase 1 and 6: 00100001'
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Turn signal heads at this intersection on or off.
                    omit:
                      type: string
                      description: Omit specified phases. A bit string representing
                        request for all 8 phases in descending order.
                      example: '00100001'
                    hold:
                      type: string
                      description: Hold specified phases green. A bit string representing
                        request for all 8 phases in descending order.
                      example: '01000010'
                    forceOff:
                      type: string
                      description: Force off specified phases. A bit string representing
                        request for all 8 phases in descending order.
                      example: '00100010'
                    omitPedestrian:
                      type: string
                      description: Omit pedestrian call for specified phases. A bit
                        string representing 8 phases in descending order.
                      example: '00010001'
                    callVehicle:
                      type: string
                      description: A vehicle call will be placed on specified phases.
                        A bit string representing 8 phases in descending order.
                      example: '00010001'
                    callPedestrian:
                      type: string
                      description: A pedestrian call will be placed on specified phases.
                        8 phases in descending order.
                      example: '10001001'
                    reset:
                      type: boolean
                      description: Request a reset of the timing on this traffic controller.
                        Reset is performed before other items in this request.
                    flash:
                      type: boolean
                      description: Toggles the intersection between an all way flash
                        and a free timed mode.
                    timePaused:
                      type: boolean
                      description: Pause or un-pause ring time of this intersection.
                        Causes all lights to freeze in current state.
                    timeClearControl:
                      type: integer
                      description: Default is 0 - disabled. Changing this per traffic
                        controller causes control commands to be cleared after input
                        number of seconds.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/phases:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: integer
        minimum: 1
    get:
      summary: Return list of phases configured for an intersection
      tags:
      - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  phases:
                    type: array
                    description: A list of phases for this intersection
                    items:
                      $ref: '#/components/schemas/Phase'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/preempt/{preempt_id}:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: string
        minimum: 1
    - in: path
      name: preempt_id
      required: true
      description: An intersection preempt ID.
      schema:
        type: string
        minimum: 1
    patch:
      tags:
      - Intersections
      summary: Allows enabling/disabling preconfigured preempt at an intersection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Enables or disables a given preempt configuration.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/signals:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: integer
        minimum: 1
    get:
      summary: Return list of traffic signal configured for an intersection
      tags:
      - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signals:
                    type: array
                    description: A list of signals for this intersection
                    items:
                      $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/crosswalks:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: integer
        minimum: 1
    get:
      summary: Return list of crosswalks within an intersection
      tags:
      - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalks:
                    type: array
                    description: A list of crosswalks within this intersection
                    items:
                      $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/rsus:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: integer
        minimum: 1
    get:
      summary: Return list of V2X RSUs connected to an intersection
      tags:
      - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalks:
                    type: array
                    description: A list of crosswalks within this intersection
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/stages:
    x-octane-tag:
    - Intersections
    parameters:
    - in: path
      name: id
      required: true
      description: An intersection ID string.
      schema:
        type: integer
        minimum: 1
    get:
      summary: Return list of suggested control groupings for the intersection (stages)
      tags:
      - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  stages:
                    type: array
                    description: A list of phases for this intersection
                    items:
                      $ref: '#/components/schemas/Stage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/intersection:
    x-octane-tag:
    - Intersections
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing intersection_* events.
      responses:
        200:
          description: Join of Channel
  /octane/intersection_update:
    x-octane-tag:
    - Intersections
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of an intersection is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Intersection event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this intersection
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/IntersectionState'
  /octane/intersection_request:
    x-octane-tag:
    - Intersections
    get:
      tags:
      - WebSockets-Events
      summary: Event published when request to change state was made on this intersection.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Intersection'
  /signals:
    x-octane-tag:
    - Signals
    get:
      tags:
      - Signals
      summary: Return a list of signal objects describing all instrumented signals
        within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signals:
                    type: array
                    description: A list of signals
                    items:
                      $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /signal/{id}:
    x-octane-tag:
    - Signals
    parameters:
    - in: path
      name: id
      required: true
      description: A signal ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Signals
      summary: Return an signal object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signal:
                    $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Signals
      summary: Allows control of a single signal set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: The specified object you are sending.
                  type: object
                  properties:
                    reset:
                      type: boolean
                      description: Request a reset of the timing on this traffic controller.
                        Reset is performed before other items in this request.
                    flash:
                      type: boolean
                      description: Toggles the intersection between an all way flash
                        and a free timed mode.
                    left:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                          - RED
                          - YELLOW
                          - GREEN
                    right:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                          - RED
                          - YELLOW
                          - GREEN
                    straight:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                          - RED
                          - YELLOW
                          - GREEN
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/signal:
    x-octane-tag:
    - Signals
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing intersection_* events.
      responses:
        200:
          description: Join of Channel
  /octane/signal_update:
    x-octane-tag:
    - Signals
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on update of signal state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Signal event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this signal
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/SignalState'
  /octane/signal_request:
    x-octane-tag:
    - Signals
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when a request to a signal is being serviced.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Signal'
  /railcrossings:
    x-octane-tag:
    - Rail
    get:
      tags:
      - Rail
      summary: Return a list of rail crossing objects describing all instrumented
        crossings within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  railcrossings:
                    type: array
                    description: A list of rail crossings
                    items:
                      $ref: '#/components/schemas/Railcrossing'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /railcrossing/{id}:
    x-octane-tag:
    - Rail
    parameters:
    - in: path
      name: id
      required: true
      description: A rail crossing ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Rail
      summary: Return an rail crossing object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  railcrossing:
                    $ref: '#/components/schemas/Railcrossing'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Rail
      summary: Updates an existing rail crossing status, allowing for triggering.
        Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    manualCall:
                      type: boolean
                      description: Activate rail crossing cycle (close, wait, open)
                    manualCallTimeOverride:
                      type: integer
                      description: Specify a length of time the gate should stay in
                        the closed position during a manual call. This setting does
                        not persist.
                    activated:
                      type: boolean
                      description: Activate or deactivate the rail crossing.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/railcrossing:
    x-octane-tag:
    - Rail
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing railcrossing_* events.
      responses:
        200:
          description: Join of Channel
  /octane/railcrossing_update:
    x-octane-tag:
    - Rail
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on update of railcrossing state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Rail crossing event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this rail crossing
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/RailcrossingState'
  /octane/railcrossing_request:
    x-octane-tag:
    - Rail
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when a request to a railcrossing is being serviced.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Railcrossing'
  /crosswalks:
    x-octane-tag:
    - Crosswalks
    get:
      tags:
      - Crosswalks
      summary: Return a list of crosswalk objects describing all instrumented crossings
        within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalks:
                    type: array
                    description: A list of crosswalks
                    items:
                      $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /crosswalk/{id}:
    x-octane-tag:
    - Crosswalks
    parameters:
    - in: path
      name: id
      required: true
      description: A crosswalk ID number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - Crosswalks
      summary: Return a crosswalk object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalk:
                    $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Crosswalks
      summary: Updates an existing crosswalk status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    callPedestrian:
                      type: boolean
                      description: Activate crosswalk cycle
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/crosswalk:
    x-octane-tag:
    - Crosswalks
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing crosswalk_* events.
      responses:
        200:
          description: Join of Channel
  /octane/crosswalk_update:
    x-octane-tag:
    - Crosswalks
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on update of railcrossing state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Crosswalk event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this crosswalk
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/CrosswalkState'
  /octane/crosswalk_request:
    x-octane-tag:
    - Crosswalks
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when a request to a railcrossing is being serviced.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Crosswalk'
  /gates:
    x-octane-tag:
    - Gates
    get:
      tags:
      - Gates
      summary: Return a list of gate objects describing all instrumented gates within
        the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gates:
                    type: array
                    description: A list of Gates
                    items:
                      $ref: '#/components/schemas/Gate'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /gate/{id}:
    x-octane-tag:
    - Gates
    parameters:
    - in: path
      name: id
      required: true
      description: A gate ID number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - Gates
      summary: Return a gate object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gate:
                    $ref: '#/components/schemas/Gate'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Gates
      summary: Updates an existing gate status, allowing for triggering. Returns request
        ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    gateCall:
                      type: boolean
                      description: Activate gate cycle
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/gate:
    x-octane-tag:
    - Gates
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing gate_* events.
      responses:
        200:
          description: Join of Channel
  /octane/gate_update:
    x-octane-tag:
    - Gates
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on update of gate state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Gate event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this gate
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/GateState'
  /octane/gate_request:
    x-octane-tag:
    - Gates
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when a request to a gate is being serviced.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Gate'
  /weather/alerts/current:
    x-octane-tag:
    - Weather
    get:
      tags:
      - Weather
      summary: Return the current weather alert
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  alerts:
                    type: array
                    description: A single weather alert
                    items:
                      $ref: '#/components/schemas/WeatherAlert'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /weather/alerts/{date}:
    x-octane-tag:
    - Weather
    parameters:
    - in: path
      name: date
      required: true
      description: YYYY-MM-DD
      schema:
        type: string
    get:
      tags:
      - Weather
      summary: Return a list of weather alerts from given date
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  alerts:
                    type: array
                    description: A list of weather alerts
                    items:
                      $ref: '#/components/schemas/WeatherAlert'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/weather:
    x-octane-tag:
    - Weather
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing weather_* events.
      responses:
        200:
          description: Joined the weather channel.
  /octane/weather_alert:
    x-octane-tag:
    - Weather
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to users when a new weather alert is broadcast.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherAlert'
  /octane/weather_alert_update:
    x-octane-tag:
    - Weather
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to users when a weather alert is sent to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Weather alert update update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this weather alert
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/WeatherAlertState'
  /weather/stations:
    x-octane-tag:
    - Weather
    get:
      tags:
      - Weather
      summary: Return a list of WeatherStation objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  stations:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/WeatherStation'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /weather/station/{id}:
    x-octane-tag:
    - Weather
    parameters:
    - in: path
      name: id
      required: true
      description: A weather station ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Weather
      summary: Return a station object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  station:
                    $ref: '#/components/schemas/WeatherStation'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /weather/{station}:
    x-octane-tag:
    - Weather
    parameters:
    - in: path
      name: station
      required: true
      description: One of the valid weather stations
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Weather
      summary: Return a list of the five most recent weather data points for a specific
        station
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  weather:
                    type: array
                    description: A list of weather data points
                    items:
                      $ref: '#/components/schemas/Weather'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /weather/{station_id}/{date}:
    x-octane-tag:
    - Weather
    parameters:
    - in: path
      name: station_id
      required: true
      description: Identifier for a weather station
      schema:
        type: string
        minimum: 1
    - in: path
      name: date
      required: true
      description: Date in the following format dd-mm-yyyy
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Weather
      summary: Return the weather observations for specific station at the specified
        date
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  weather:
                    type: array
                    description: A list of all weather data points in the database
                      for specific station and date
                    items:
                      $ref: '#/components/schemas/Weather'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - Sensors
      summary: Return a list of sensors at this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  sensors:
                    type: array
                    description: A list of Sensors
                    items:
                      $ref: '#/components/schemas/Sensor'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/packages:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - Sensors
      summary: Return a list of sensors packages and groupings from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  packages:
                    type: array
                    description: A list of Sensor packages
                    items:
                      $ref: '#/components/schemas/SensorPackage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/cameras:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - Sensors
      summary: Return a list of cameras from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  cameras:
                    type: array
                    description: A list of Sensor cameras
                    items:
                      $ref: '#/components/schemas/SensorCamera'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/lidars:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - Sensors
      summary: Return a list of LIDAR sensors from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lidars:
                    type: array
                    description: A list of Sensor LIDAR
                    items:
                      $ref: '#/components/schemas/SensorLIDAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/radars:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - Sensors
      summary: Return a list of RADAR sensors from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  radars:
                    type: array
                    description: A list of Sensor RADAR
                    items:
                      $ref: '#/components/schemas/SensorRADAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/{id}:
    x-octane-tag:
    - Sensors
    parameters:
    - in: path
      name: id
      required: true
      description: A sensor ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Sensors
      summary: Return information about a sensor.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gate:
                    $ref: '#/components/schemas/Sensor'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/package/{id}:
    x-octane-tag:
    - Sensors
    parameters:
    - in: path
      name: id
      required: true
      description: A sensor ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Sensors
      summary: Return information about a grouping of sensors, known as a sensor package,
        with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  package:
                    $ref: '#/components/schemas/SensorPackage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/camera/{id}:
    x-octane-tag:
    - Sensors
    parameters:
    - in: path
      name: id
      required: true
      description: A sensor ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Sensors
      summary: Return information about a camera with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  camera:
                    $ref: '#/components/schemas/SensorCamera'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/lidar/{id}:
    x-octane-tag:
    - Sensors
    parameters:
    - in: path
      name: id
      required: true
      description: A sensor ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Sensors
      summary: Return information about a LIDAR with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lidar:
                    $ref: '#/components/schemas/SensorLIDAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/radar/{id}:
    x-octane-tag:
    - Sensors
    parameters:
    - in: path
      name: id
      required: true
      description: A sensor ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Sensors
      summary: Return information about a RADAR with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  radar:
                    $ref: '#/components/schemas/SensorRADAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/sensor:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing sensor_* events.
      responses:
        200:
          description: Join of Channel
  /octane/sensor_update:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of a sensor is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Sensor update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this sensor
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/SensorState'
  /octane/sensor_request:
    x-octane-tag:
    - Sensors
    get:
      tags:
      - WebSockets-Events
      summary: Event published when request to change state was made on this sensor.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/SensorState'
  /robots:
    x-octane-tag:
    - Robots
    get:
      tags:
      - Robots
      summary: Return a list of robots configured for this facility
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  robots:
                    type: array
                    description: A list of robots
                    items:
                      $ref: '#/components/schemas/Robot'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /robot/{id}:
    x-octane-tag:
    - Robots
    parameters:
    - in: path
      name: id
      required: true
      description: A robot ID string.
      schema:
        type: number
        minimum: 1
    get:
      tags:
      - Robots
      summary: Return a information about a robot with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  robot:
                    $ref: '#/components/schemas/Robot'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Robots
      summary: Allows enabling/disabling control of a robot.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Controls state of a specific robot related to motion.
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Power on or off robot if controllable remotely.
                        If robot is activated, deactivates robot. When this attribute
                        is included and power is controllable, the activated and scenario
                        attributes are ignored.
                    activated:
                      type: boolean
                      description: Run the currently selected scenario. If robot is
                        in manual mode and can be switched to automated, OCTANE will
                        switch the robot or fail this request.
                    scenario:
                      description: The desired next scenario for this robot.
                      type: object
                      properties:
                        id:
                          type: number
                          description: An ID number identifying this robot scenario
                            inside OCTANE
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  robot:
                    $ref: '#/components/schemas/Robot'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /robot/{id}/scenarios:
    x-octane-tag:
    - Robots
    parameters:
    - in: path
      name: id
      required: true
      description: A robot ID string.
      schema:
        type: number
        minimum: 1
    get:
      tags:
      - Robots
      summary: Return a list of all configured/stored scenarios for a robot.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenarios:
                    type: array
                    description: A list of robots
                    items:
                      $ref: '#/components/schemas/RobotScenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /robot/{id}/scenario:
    x-octane-tag:
    - Robots
    parameters:
    - in: path
      name: id
      required: true
      description: A robot ID string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Robots
      summary: The currently selected scenario for this robot.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotScenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    post:
      tags:
      - Robots
      summary: Creates a new user defined scenario for this robot.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenario:
                  $ref: '#/components/schemas/RobotScenario'
      responses:
        200:
          description: Success, returns created scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotScenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /robot/{id}/scenario/{scenarioId}:
    x-octane-tag:
    - Robots
    parameters:
    - in: path
      name: id
      required: true
      description: A robot ID number.
      schema:
        type: number
        minimum: 1
    - in: path
      name: scenarioId
      required: true
      description: A robot scenario string.
      schema:
        type: number
        minimum: 1
    get:
      tags:
      - Robots
      summary: Return a robot scenario with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenario:
                    $ref: '#/components/schemas/RobotScenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    delete:
      tags:
      - Robots
      summary: Removes a specified non-locked scenario
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/robot:
    x-octane-tag:
    - Robots
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing robot_* events.
      responses:
        200:
          description: Join of Channel
  /octane/robot_update:
    x-octane-tag:
    - Robots
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of a robot is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Robot state update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this robot.
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/RobotState'
  /octane/robot_activate:
    x-octane-tag:
    - Robots
    post:
      tags:
      - WebSockets-Events
      summary: Event submitted to request a start/stop of a robot in it's current
        control state and scenario.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Payload for broadcasting a message via a RSU
              properties:
                id:
                  description: Identifier of the Robot to control.
                  type: string
                payload:
                  type: object
                  description: Robot control similar to patch on REST endpoint
                  properties:
                    activated:
                      description: Start/stop control mode.
                      type: boolean
                    scenario:
                      description: The desired next scenario for this robot.
                      type: object
                      properties:
                        id:
                          type: number
                          description: An ID number identifying this robot scenario
                            inside OCTANE
  /octane/robot_request:
    x-octane-tag:
    - Robots
    get:
      tags:
      - WebSockets-Events
      summary: Event published when request to change state was made on this robot.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Robot'
  /safety/equipment:
    x-octane-tag:
    - Safety
    get:
      summary: Return list of [Cones, Barrels, Delineators, Barricades, ...] safety
        equipment
      tags:
      - Safety
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  equipment:
                    properties:
                      id:
                        type: string
                      equipment_type:
                        $ref: '#/components/schemas/SafetyEquipmentType'
                      state:
                        properties:
                          placed:
                            type: boolean
                          latitude:
                            type: number
                          longitude:
                            type: number
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    delete:
      summary: Resets the location and placed attribute of all safety equipment
      tags:
      - Safety
      parameters:
      - in: query
        name: safety_equipment_type
        required: false
        description: The type of safety equipment you want reset, if none provided
          all equipment is reset
        schema:
          $ref: '#/components/schemas/SafetyEquipmentType'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /safety/equipment/{id}:
    x-octane-tag:
    - Safety
    parameters:
    - in: path
      name: id
      required: true
      description: An ID identifying the equipment, the equipment is not marked with
        the ID
      schema:
        type: string
        minimum: 1
    - in: query
      name: safety_equipment_type
      required: true
      description: The type of safety equipment
      schema:
        $ref: '#/components/schemas/SafetyEquipmentType'
    get:
      summary: Returns a single piece of safety equipment with the specified ID.
      tags:
      - Safety
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  safetyEquipment:
                    type: object
                    properties:
                      id:
                        type: string
                      ephemeral_type:
                        $ref: '#/components/schemas/SafetyEquipmentType'
                      state:
                        properties:
                          placed:
                            type: boolean
                          latitude:
                            type: number
                          longitude:
                            type: number
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Safety
      summary: Allows update of a single piece of safety equipment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Describe the stat of a single piece of safety equipment
                  type: object
                  properties:
                    latitude:
                      type: number
                      description: Set latitude of equipment
                    longitude:
                      type: number
                      description: Set longitude of equipment
                    placed:
                      type: boolean
                      description: Mark the equipment as placed (does not prevent
                        subsequent updates)
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /maintenance:
    get:
      tags:
        - Maintenance
      summary: Return a list of all maintenance equipment
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  maintenance:
                    type: array
                    description: A list of maintenance devices supported by octane
                    items:
                      $ref: '#/components/schemas/MaintenanceEquipment'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /maintenance/lawnmowers:
    get:
      tags:
        - Maintenance
      summary: Return a list of lawnmower objects
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lawnmowers:
                    type: array
                    description: A list of lawnmowers supported by octane
                    items:
                      $ref: '#/components/schemas/LawnMower'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /maintenance/lawnmower/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A unique identifier for the lawnmower
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Maintenance
      summary: Return the current location and state of the lawnmower
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawnMower'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Maintenance
      summary: Change the state of a lawnmower
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Controls the running state of the lawnmower
                  type: object
                  properties:
                    mowerCall:
                      type: string
                      description: "Change the mowing state of the mower (start or stop)"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /facilities:
    x-octane-tag:
    - Facility
    get:
      tags:
      - Facility
      summary: Return information about facilities managed by this OCTANE instance.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  facilities:
                    type: array
                    description: Facilities configured in this octane instance that
                      the user has access to.
                    items:
                      $ref: '#/components/schemas/Facility'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /facility:
    x-octane-tag:
    - Facility
    get:
      tags:
      - Facility
      summary: Return information about the primary reservation facility and current
        reservation.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  facility:
                    $ref: '#/components/schemas/Facility'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /facility/chat:
    x-octane-tag:
    - Facility
    post:
      tags:
      - Facility
      summary: Post a message to the facility chat through ReST.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A message that a user wants to send via facility chat.
              properties:
                message:
                  type: string
                  description: The message to be sent to other users of the system.
                user:
                  type: string
                  description: Username to send with message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message sent.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /facility/notification:
    x-octane-tag:
    - Facility
    post:
      tags:
      - Facility
      summary: 'TOKEN TYPE: ADMIN. Post a message to the facility notification system.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A message that a user wants to send via facility chat.
              properties:
                message:
                  type: string
                  description: The message to be sent to other users of the system.
                type:
                  type: string
                  description: A type describing the message
                  enum:
                  - NOTIFY
                  - WEATHER
                  - SCHEDULE
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The notification sent.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/facility:
    x-octane-tag:
    - Facility
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing facility_* events.
      responses:
        200:
          description: Join of Channel
  /octane/facility_message:
    x-octane-tag:
    - Facility
    get:
      tags:
      - WebSockets-Events
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityMessage'
  /octane/facility_request:
    x-octane-tag:
    - Facility
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted for facility wide requests.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Facility'
  /octane/facility_update:
    x-octane-tag:
    - Facility
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted for facility wide status updates.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Facility'
  /v2x:
    x-octane-tag:
    - V2X
    get:
      tags:
      - V2X
      summary: Return a list of V2X devices known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  v2xs:
                    type: array
                    description: A list of V2X devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsus:
    x-octane-tag:
    - V2X
    get:
      tags:
      - V2X
      summary: Return a list of V2X RSUs known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  rsus:
                    type: array
                    description: A list of V2X RSU devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - V2X
      summary: Updates all existing and capable V2x RSUs. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/obus:
    x-octane-tag:
    - V2X
    get:
      tags:
      - V2X
      summary: Return a list of V2X OBUs known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  obus:
                    type: array
                    description: A list of V2X OBU devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - V2X
      summary: Updates an existing and capable V2X OBUs. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/vrus:
    x-octane-tag:
    - V2X
    get:
      tags:
      - V2X
      summary: Return a list of V2X Vulnerable Road Users (VRUs) known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  vrus:
                    type: array
                    description: A list of V2X VRUs.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/{id}:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X ID number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  v2x:
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns request
        ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/vru/{id}:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X Vulnerable Road User identifier number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  vru:
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X ID number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  rsu:
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns request
        ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}/bsm:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X ID number.
      schema:
        type: integer
        minimum: 1
    post:
      tags:
      - V2X
      summary: For RSUs with support, pack posted data into active protocol format
        and broadcasts the BSM.  Request body type allows for sending a pre-packed
        message to be sent as a direct payload or for a JSON format that will be encoded
        to the appropriate message format and broadcast serverside. request ID on
        success.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2XBSM'
          application/octet-stream:
            schema:
              type: object
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}/bsms:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X ID number.
      schema:
        type: integer
        minimum: 1
    post:
      tags:
      - V2X
      summary: For RSUs with support, pack posted data into active protocol format
        and broadcasts each row through the BSM. request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/V2XBSM'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}/psm:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X RSU ID number.
      schema:
        type: integer
        minimum: 1
    post:
      tags:
      - V2X
      summary: For RSUs with support, pack posted data into active protocol format
        and broadcasts the PSM. Request body type allows for sending a pre-packed
        message to be sent as a direct payload or for a JSON format that will be encoded
        to the appropriate message format and broadcast server side. request ID on
        success.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2XPSM'
          application/octet-stream:
            schema:
              type: object
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/obu/{id}:
    x-octane-tag:
    - V2X
    parameters:
    - in: path
      name: id
      required: true
      description: A V2X ID number.
      schema:
        type: integer
        minimum: 1
    get:
      tags:
      - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  obu:
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns request
        ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: is the radio on or off?
                    longitude:
                      type: number
                      description: The longitude of the V2X device.
                    latitude:
                      type: number
                      description: The latitude of the V2X device.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/v2x:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing requests and updates from V2X devices.
        Provides notifications when new devices are heard from.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known RSUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_vru_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known VRUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known OBUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_parsed:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known RSUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_vru_parsed:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known VRUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_parsed:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known OBUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_[id]_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing all raw v2x_* events from a specific RSU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_[id]_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing all raw v2x_* events from a specific OBU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_[id]_parsed:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: JSON formatted version of events from a specific RSU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_[id]_parsed:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Channels
      summary: formatted version of events from a specific OBU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_update:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on update of V2X device state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: V2X Device update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this V2X Device
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/V2X'
  /octane/v2x_request:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on request to a V2X device.
      responses:
        200:
          description: Success
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2X'
  /octane/v2x_new:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: COMING SOON - Event emitted when a new V2X device is heard from and
        added to the V2X device listing.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2X'
  /octane/v2x_raw:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on message between V2X devices.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2XRaw'
  /octane/v2x_SPaT:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: On receipt of a V2X SPaT message, this event is emitted with a parsed
        version of the message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2XSPaT'
  /octane/v2x_BSM:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: On receipt of a V2X BSM message, this event is emitted with a parsed
        version of the message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2XBSM'
    post:
      tags:
      - WebSockets-Events
      summary: Broadcast a V2X BSM message through an RSU
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Payload for broadcasting a message via a RSU
              properties:
                id:
                  description: Identifier of the RSU to broadcast the message
                  type: string
                payload:
                  $ref: '#/components/schemas/V2XBSM'
  /octane/v2x_PSM:
    x-octane-tag:
    - V2X
    get:
      tags:
      - WebSockets-Events
      summary: On receipt of a V2X PSM message, this event is emitted with a parsed
        version of the message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2XPSM'
    post:
      tags:
      - WebSockets-Events
      summary: Broadcast a V2X PSM message through an RSU
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Payload for broadcasting a message via a RSU
              properties:
                id:
                  description: Identifier of the RSU to broadcast the message
                  type: string
                payload:
                  $ref: '#/components/schemas/V2XPSM'
  /management/modules:
    x-octane-tag:
    - Management
    get:
      tags:
      - Management
      summary: Return a list of Modules supported by this instance of Octane
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  modules:
                    type: array
                    description: A list of modules supported by octane
                    example:
                    - Crosswalk
                    - Intersections
                    - V2X
                    - Facilities
                    - Signals
                    - Lights
                    - Scenarios
                    - Railcrossings
                    - Crosswalks
                    - Gates
                    - Sensors
                    - Safety
                    - Garages
                    - Websockets
                    - Management
                    - Edge
                    - Maintenance
                    - Weather
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Internal server error
  /management/favorites:
    x-octane-tag:
    - Management
    get:
      tags:
      - Management
      summary: Retrieve list of all favorites.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  favorites:
                    type: array
                    description: A list of the users Favorite items from each module.
                    items:
                      $ref: '#/components/schemas/Favorite'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/favorite:
    x-octane-tag:
    - Management
    post:
      tags:
      - Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                moduleName:
                  type: string
                favoriteID:
                  type: integer
      summary: Add a favorite to database.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/favorite/{moduleName}/{favoriteId}:
    x-octane-tag:
    - Management
    delete:
      parameters:
      - name: moduleName
        in: path
        required: true
        description: Type of infrastructure
        schema:
          type: string
          description: Type of infrastructure
      - name: favoriteId
        in: path
        required: true
        description: Type of infrastructure id
        schema:
          type: integer
          description: Type of infrastructure id
      tags:
      - Management
      summary: Delete a favorite from the database.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: A message regarding the status of the deletion.
                properties:
                  message:
                    type: string
                    description: The delete request was successful.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/polling/intersections:
    x-octane-tag:
    - Management
    patch:
      tags:
      - Management
      summary: 'TOKEN TYPE: ADMIN. Start/Stop Intersection Traffic signal polling.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Starts or terminates all polling processes.
        description: Modifications to the process that controls intersection updates
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/facility/reset:
    x-octane-tag:
    - Management
    post:
      tags:
      - Management
      summary: 'TOKEN TYPE: USER. Reset controllable items within the facility.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    confirm:
                      type: boolean
                      description: Confirms the reset of the facility.
        description: Modify the state of all devices in the facility
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/device/callback:
    x-octane-tag:
    - Management
    post:
      tags:
      - Management
      summary: 'TOKEN TYPE: DEVICE. Handles callbacks from physical devices connected
        to API.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: Data from event
                event:
                  type: string
                  description: Remote Event name
                coreid:
                  type: string
                  description: Device ID of calling device
                published_at:
                  type: string
                  description: The time this event was published.
        description: External devices use this to modify state of API managed device
          state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /requests/queued:
    x-octane-tag:
    - Requests
    get:
      summary: Return information of all jobs queued by this user.
      tags:
      - Requests
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  queuedJobs:
                    type: array
                    items:
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Time given request was created
                          example: '2019-03-16T16:47:04.123-4:00'
                        enqueuedAt:
                          type: string
                          format: date-time
                          description: Time given request was enqueued
                          example: '2019-03-16T16:47:04.123-4:00'
                        jobType:
                          type: string
                          description: Type of request
                        timeInQueue:
                          type: string
                          format: date-time
                          description: Time request has been in current status
                          example: '2019-03-16T16:47:04.123-4:00'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /requests/failed:
    x-octane-tag:
    - Requests
    get:
      summary: Return information of all jobs requested by this user in a failed state.
      tags:
      - Requests
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  failedJobs:
                    type: array
                    items:
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Time given request was created
                          example: '2019-03-16T16:47:04.123-4:00'
                        enqueuedAt:
                          type: string
                          format: date-time
                          description: Time given request was enqueued
                          example: '2019-03-16T16:47:04.123-4:00'
                        jobType:
                          type: string
                          description: Type of request
                        timeInQueue:
                          type: string
                          format: date-time
                          description: Time request has been in current status
                          example: '2019-03-16T16:47:04.123-4:00'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /requests/job/{id}:
    x-octane-tag:
    - Requests
    parameters:
    - in: path
      name: id
      required: true
      description: A request ID string
      schema:
        type: string
        minimum: 1
    get:
      summary: Return information of request with given id
      tags:
      - Requests
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  failedRequests:
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Time given request was created
                        example: '2019-03-16T16:47:04.123-4:00'
                      enqueuedAt:
                        type: string
                        format: date-time
                        description: Time given request was enqueued
                        example: '2019-03-16T16:47:04.123-4:00'
                      status:
                        type: string
                        description: Current status of given request
                      description:
                        type: string
                        description: Type of request
                      timeInStatus:
                        type: string
                        format: date-time
                        description: Time request has been in current status
                        example: '2019-03-16T16:47:04.123-4:00'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /requests/job/{type}/queued:
    x-octane-tag:
    - Requests
    parameters:
    - in: path
      name: type
      required: true
      description: A request type string.
      schema:
        type: string
        minimum: 1
    get:
      summary: Return list of queued {type} requests
      tags:
      - Requests
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  queuedRequests:
                    type: string
                    description: Request ID for queued requests of given type.
  /requests/job/{type}/failed:
    x-octane-tag:
    - Requests
    parameters:
    - in: path
      name: type
      required: true
      description: A requests type string.
      schema:
        type: string
        minimum: 1
    get:
      summary: Return list of failed {type} requests
      tags:
      - Requests
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  failedRequests:
                    type: string
                    description: Request ID for failed requests of given type.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sessions:
    x-octane-tag:
    - Sessions
    get:
      tags:
      - Sessions
      summary: 'TOKEN TYPE: ADMIN. Lists all active sessions across all facilities.'
      description: Lists sessions and their users. A list of currently active, valid,
        and non-expired sessions.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  sessions:
                    type: array
                    description: A list of sessions managed by this octane instance
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                          description: Email address of session owner.
                        sessionType:
                          type: string
                          description: Event Identifier
                        dateValid:
                          type: string
                          format: date-time
                          description: UTC valid date time
                          example: '2019-03-16T16:47:04.123-4:00'
                        dateExpire:
                          type: string
                          format: date-time
                          description: UTC expiration date time
                          example: '2019-03-16T16:47:04.123-4:00'
                        facilities:
                          type: array
                          items:
                            type: string
                            description: Name of the facility which session has access.
                          example:
                          - Mcity
                          - Urban
                          - Highway
                          - Garage
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /session:
    x-octane-tag:
    - Sessions
    get:
      tags:
      - Sessions
      summary: Current session information.
      description: Information about the current requesting user session.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  session:
                    type: object
                    description: A set of information about the user session.
                    properties:
                      email:
                        type: string
                        description: Email address of session owner.
                      sessionType:
                        type: string
                        description: Event Identifier
                      dateValid:
                        type: string
                        format: date-time
                        description: UTC valid date time
                        example: '2019-03-16T16:47:04.123-4:00'
                      dateExpire:
                        type: string
                        format: date-time
                        description: UTC expiration date time
                        example: '2019-03-16T16:47:04.123-4:00'
                      facilities:
                        type: array
                        items:
                          type: string
                          description: Name of the facility which session has access.
                        example:
                        - Mcity
                        - Urban
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    post:
      tags:
      - Sessions
      summary: 'TOKEN TYPE: SCHEDULING. Creates a new USER type token with API access
        between a specific date and time.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of token owner.
                desc:
                  type: string
                  description: Event Identifier
                dateValid:
                  type: string
                  format: date-time
                  description: UTC valid date time
                  example: '2019-03-16T16:47:04-04:00'
                dateExpire:
                  type: string
                  format: date-time
                  description: UTC expiration date time
                  example: '2019-03-16T16:47:04-04:00'
                facilities:
                  type: array
                  items:
                    type: string
                    description: Name of the facility which session has access.
                  example:
                  - Mcity
                  - Urban
                  - Highway
                  - Garage
        description: Request for a new token to be created. Dates are in format of
          2019-03-16T16:47:04-04:00
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Newly generated access token
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/ipc:
    get:
      tags:
      - WebSockets-Channels
      summary: Channel for IPC/Timing messages. Publishes user_* events.
      responses:
        200:
          description: Join of Channel
  /octane/ipc_message:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to other users when a client emits an IPC message to
        others listening.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPCMessage'
  /octane/user:
    get:
      tags:
      - WebSockets-Channels
      summary: Channel for direct messages. Publishes user_* events.
      responses:
        200:
          description: Join of Channel
  /octane/user_message:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to other users when a user emits in the user channel.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMessage'
    post:
      tags:
      - WebSockets-Events
      summary: Event to be submitted for broadcast to the user channel only.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A message a user wants to broadcast
              properties:
                message:
                  type: string
                  description: The message to be sent to other users of the system.
                user:
                  type: string
                  description: Username to send with message. Optional.
  /octane/join:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to other users when a user joins a channel successfully.
      responses:
        200:
          description: Success
    post:
      tags:
      - WebSockets-Events
      summary: Event to be submitted for user to join a specified channel.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The channel a user wishes to join.
              properties:
                channel:
                  type: string
                  description: Channel to join.
  /octane/leave:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to other users when a user leaves a channel successfully.
      responses:
        200:
          description: Success
    post:
      tags:
      - WebSockets-Events
      summary: Event to be submitted for user to leave a specified channel.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The channel a user wishes to leave
              properties:
                channel:
                  type: string
                  description: Channel to leave.
  /octane/auth:
    post:
      tags:
      - WebSockets-Events
      summary: Event emitted to server when user wishes to authenticate.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The channel a user wishes to leave
              properties:
                x-api-key:
                  type: string
                  description: The authentication token to login to the socket feed
                    with.
  /octane/auth_ok:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted on success of authentication.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: OK
  /octane/auth_fail:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted to user if authentication through socket.io fails. User
        is then disconnected.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message describing why the authentication failed.
  /octane/channels:
    get:
      tags:
      - WebSockets-Events
      summary: Emitted in response to request for OCTANE channels.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Channel name
                    subscribed:
                      type: boolean
                      description: User is currently subscribed to this channel.
    post:
      tags:
      - WebSockets-Events
      summary: Event to be submitted to request current users channels and all valid
        channels.
      responses:
        200:
          description: Success
  /scenarios:
    x-octane-tag:
    - Scenarios
    get:
      tags:
      - Scenarios
      summary: Return a list of scenario objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenarios:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Scenario'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Internal server error
  /scenario/{id}:
    x-octane-tag:
    - Scenarios
    parameters:
    - in: path
      name: id
      required: true
      description: A scenario id string.
      schema:
        type: string
        minimum: 1
    get:
      tags:
      - Scenarios
      summary: Return a scenario object with the specified id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenario:
                    $ref: '#/components/schemas/Scenario'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Scenarios
      summary: Update an existing scenario
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenario:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the scenario
                    workspace:
                      type: string
                      description: The XML structure containing the code to be run
                        in the scenario
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    $ref: '#/components/schemas/Scenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    delete:
      tags:
      - Scenarios
      summary: Delete a scenario from the database
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: A message regarding the status of the deletion.
                properties:
                  message:
                    type: string
                    description: The delete request was successful.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /scenario:
    x-octane-tag:
    - Scenarios
    post:
      tags:
      - Scenarios
      summary: Create a new scenario object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenario:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the scenario
                    workspace:
                      type: string
                      description: The XML structure containing the code to be run
                        in the scenario
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    $ref: '#/components/schemas/Scenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /beacons:
    get:
      tags:
      - Beacons
      summary: Return a list of beacons available for your session
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  beacons:
                    type: array
                    description: A list of beacons
                    items:
                      $ref: '#/components/schemas/Beacon'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /beacon/:
    post:
      tags:
      - Beacons
      summary: Create a new session specific beacon
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                beacon:
                  $ref: '#/components/schemas/Beacon'
            example:
              id_string: 0A1B2C3D4E5F
              name: Mcity RTK Device
              description: Mcity RTK Device mounted on cone
              host:
                width: 0.35
                length: 0.35
                height: 0.7
              hostLocation:
                x: 0.17
                y: 0.17
                z: 0.7
              octaneAssociation:
                module: ARROW_BOARD
                id: 2
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /beacon/{idString}:
    parameters:
    - in: path
      name: idString
      required: true
      description: The unique identifying string for the beacon
      schema:
        type: string
        minimum: 2
    get:
      tags:
      - Beacons
      summary: Return a information about a beacon with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/Beacon'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
      - Beacons
      summary: Update the state of a specific beacon
      requestBody:
        content:
          application/json:
            schema:
              properties:
                state:
                  $ref: '#/components/schemas/BeaconState'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/Beacon'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    delete:
      tags:
      - Beacons
      summary: Delete a session specific beacon
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/Beacon'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/beacon:
    get:
      tags:
      - WebSockets-Channels
      summary: Channel used for publishing beacon_* events.
      responses:
        200:
          description: Join of Channel
  /octane/beacon_update:
    get:
      tags:
      - WebSockets-Events
      summary: Event emitted when the state of a beacon is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Beacon state update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this beacon.
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: '2019-03-16T16:47:04.123-4:00'
                  state:
                    $ref: '#/components/schemas/BeaconState'
  /octane/beacon_message:
    post:
      tags:
      - WebSockets-Events
      summary: Event submitted to update the current state of a beacon
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating the state of a Beacon
              properties:
                id_string:
                  description: Identifier for the Beacon
                  type: string
                state:
                  $ref: '#/components/schemas/BeaconState'
externalDocs:
  description: Mcity website
  url: https://mcity.umich.edu
components:
  responses:
    UnauthorizedError:
      description: Authorization Error - API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    PoorFormError:
      description: Request to this endpoint was not appropriately formed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    NotFoundError:
      description: Requested ID does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    NotAllowedError:
      description: Request was denied because resource does not support this action,
        or the action results in an invalid state.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      description: Tokens that expire sent to users to utilize the API
      in: header
      name: X-API-KEY
  schemas:
    Stage:
      type: object
      description: Describes a suggested control grouping for an intersection. Stages
        are lights that work together to make non-conflicting sets of phases.
      properties:
        name:
          type: string
          description: A text description of the phases controlled by this stage.
        controlGroup:
          type: string
          description: A bit string that can be used to hold/omit/force off or utilize
            other control functions for non-conflicting portions of an intersection
            or signal.
          example: '00100001'
    Phase:
      type: object
      description: Describes a set of one or more signal heads that are wired together,
        all heads will show the same indication
      properties:
        number:
          type: integer
          description: The phase number as configured on the traffic controller
        bound:
          type: string
          description: The direction of traffic this phase controls. A signal with
            this phase would face the opposite direction.
          enum:
          - north
          - south
          - east
          - west
        turn:
          type: string
          description: Direction of movement this signal is setup to control
          enum:
          - left
          - right
          - through
        stopBar:
          type: object
          description: A list of lat/long points representing the upper left, upper
            right, lower left, and lower right corners of the stop bar corresponding
            to the phase.
          properties:
            ul:
              type: object
              description: A latitude/longitude pair representing the upper left point
                of the stop bar.
              properties:
                latitude:
                  type: number
                  description: Upper left latitude stop bar location
                longitude:
                  type: number
                  description: Upper left longitude stop bar location
            ur:
              type: object
              description: A latitude/longitude pair representing the upper right
                point of the stop bar.
              properties:
                latitude:
                  type: number
                  description: Upper right latitude stop bar location
                longitude:
                  type: number
                  description: Upper right longitude stop bar location
            ll:
              type: object
              description: A latitude/longitude pair representing the lower left point
                of the stop bar.
              properties:
                latitude:
                  type: number
                  description: Lower left latitude stop bar location
                longitude:
                  type: number
                  description: Lower left longitude stop bar location
            lr:
              type: object
              description: A latitude/longitude pair representing the lower right
                point of the stop bar.
              properties:
                latitude:
                  type: number
                  description: Lower right latitude stop bar location
                longitude:
                  type: number
                  description: Lower right longitude stop bar location
    Signal:
      type: object
      description: Describes a collection of signal heads facing a specific direction/mount
        type. Their state is also known as a PHASE in traffic control systems.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this signal set
        uri:
          type: string
          description: The URI which can be used to access this signal set directly
        name:
          type: string
          description: A text based description of the signal
        url:
          type: string
          description: A url with more information about this specific signal
        longitude:
          type: number
          description: The longitude of the centroid of the signal set
        latitude:
          type: number
          description: The latitude of the centroid of the signal set
        instrument:
          type: string
          enum:
          - light
          nullable: true
          description: The signal type
        directionFacing:
          type: string
          enum:
          - north
          - east
          - south
          - west
          description: The direction the signal head is facing
        directionTraffic:
          type: string
          enum:
          - north
          - east
          - south
          - west
          description: The direction of traffic this signal controls.
        orientation:
          type: string
          description: Describes the mounting orientation of the signal heads
          enum:
          - horizontal
          - vertical
        height:
          type: number
          description: Height of signal head to road surface in facility units.
          nullable: true
        pole:
          type: boolean
          description: Is signal mounted to a side pole.
        mast:
          type: boolean
          description: Is signal mounted to a mast off the pole pole.
        mastAngle:
          type: boolean
          description: Is mast angled off the pole
        wire:
          type: boolean
          description: Is the signal mounted by wire to the mast or pole
        backplate:
          type: boolean
          description: Does the signal have a backplate?
        left:
          type: boolean
          description: This signal set has a signal pointing in this direction
        right:
          type: boolean
          description: This signal set has a signal pointing in this direction
        straight:
          type: boolean
          description: This signal set has a signal pointing in this direction
        state:
          $ref: '#/components/schemas/SignalState'
    SignalState:
      type: object
      description: The current state of the signal set
      properties:
        left:
          type: object
          description: The current state left turn signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              nullable: true
              enum:
              - RED
              - YELLOW
              - GREEN
            status:
              type: string
              description: Light status
              enum:
              - steady
              - flashing
              - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
        right:
          type: object
          description: The current state right turn signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              nullable: true
              enum:
              - RED
              - YELLOW
              - GREEN
            status:
              type: string
              description: Light status
              enum:
              - steady
              - flashing
              - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
        straight:
          type: object
          description: The current state straight signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              enum:
              - RED
              - YELLOW
              - GREEN
              nullable: true
            status:
              type: string
              description: Light status
              enum:
              - steady
              - flashing
              - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
    Favorite:
      type: object
      properties:
        id:
          type: integer
          title: database entry id
        moduleName:
          type: string
          title: infrastructure type
        favoriteID:
          type: integer
          title: infrastructure type id
    Light:
      type: object
      description: Describes a street light within the facility. Non-instrumented
        street lights reject control requests.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this street light
        uri:
          type: string
          description: The URI which can be used to access this street light directly
        name:
          type: string
          description: A text based description of the street light
        url:
          type: string
          nullable: true
          description: A url with more information about this specific street light
        longitude:
          type: number
          description: The longitude of the centroid of the street light
        latitude:
          type: number
          description: The latitude of the centroid of the street light
        maxWattPower:
          type: number
          description: The maximum watt power of the street light
        manufacturer:
          type: string
          description: The manufacturer of the street light
        model:
          type: string
          description: The model of the street light
        controlType:
          type: string
          description: The control type of the street light
        state:
          $ref: '#/components/schemas/LightState'
    LightState:
      type: object
      description: The current state of the street light
      properties:
        updated:
          description: The last time the status of this street light was updated
          type: string
          format: date-time
        enabled:
          description: Boolean value representing if the street light is on
          type: boolean
        dimLevel:
          description: The current dim level of the street light
          type: integer
          nullable: true
    Garage:
      type: object
      description: Describes a garage state.
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this garage
        uri:
          type: string
          description: The URI which can be used to access this garage directly
        name:
          type: string
          description: A text based description of the garage
        url:
          type: string
          description: A url with more information about this specific garage
        longitude:
          type: number
          description: The longitude of the centroid of the garage
        latitude:
          type: number
          description: The latitude of the centroid of the garage
        state:
          $ref: '#/components/schemas/GarageState'
    GarageState:
      type: object
      description: The current state of the garage
      properties:
        updated:
          description: The last time the status of this garage was updated
          type: string
          format: date-time
        open:
          description: Boolean value representing if the door is open
          type: boolean
        activated:
          description: Boolean value representing if the door in motion
          type: boolean
    Intersection:
      type: object
      description: Intersections can be collections of traffic devices such as signals,
        signs, and crosswalks in multiple directions.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this intersection
        uri:
          type: string
          description: The URI which can be used to access this signal set directly
        name:
          type: string
          description: A text based description of the signal
        url:
          type: string
          description: A url with more information about this specific intersection
        longitude:
          type: number
          description: The longitude of the centroid of the signal set
        latitude:
          type: number
          description: The latitude of the centroid of the signal set
        instrument:
          type: string
          enum:
          - signal
          - stop
          - yield
          - ramp
          description: The intersection instrument type
        phases:
          type: array
          description: A listing of configured non-conflicting sets of phases that
            can be used for control.
          items:
            $ref: '#/components/schemas/Phase'
        stages:
          type: array
          description: A listing of configured non-conflicting sets of phases that
            can be used for control.
          items:
            type: object
            properties:
              name:
                type: string
                description: A name given to describe the stage of this light.
              controlGroup:
                type: string
                description: Bitstring descending order 8 phases.
                example: '00100101'
        style:
          type: string
          enum:
          - straight
          - three-way
          - four-way
          - five-way
          description: Describes the number of road segments entering the intersection
        streetMain:
          type: string
          example: Main Street
          description: The name of the street which is considered to be the main street
            by the traffic controller
        streetCross:
          type: string
          example: Cross Street
          description: The name of the second street which is considered the cross
            street by the traffic controller
        v2xIntersectionId:
          type: string
          example: '2550'
          description: Identifier for this intersection used in V2X messages such
            as MAP and SPaT.
        state:
          $ref: '#/components/schemas/IntersectionState'
    IntersectionState:
      type: object
      description: The current state of the intersection
      properties:
        updated:
          description: The last time the status of this Intersection was updated
          type: string
          format: date-time
        enabled:
          type: boolean
          description: True / False representing lit state of signal heads in intersection.
        timePaused:
          description: Is the countdown timer between phase changes for this intersection
            paused?
          type: boolean
        timeClearControl:
          description: Time in seconds between a control requests and when the traffic
            controller automatically clears that request. NTCIP 1202 Backup time.
            Setting to 0 disables automatic clearing of controls requests at this
            intersection.
          type: integer
        flash:
          type: boolean
          description: Boolean value representing if the intersection is in flash
            (night flash) mode.
        callVehicle:
          description: Active Vehicles calls placed on each phase. A bit string representing
            a true or false value for each of the 8 phases in descending order Ex.
            00100001 (Phase 1+6)
          type: string
          example: '00100001'
        callPedestrian:
          description: Active Pedestrian calls placed on each phase. A bit string
            representing a true or false value for each of the 8 phases in descending
            order Ex. 00100001 (Phase 1+6)
          type: string
          example: '00100001'
        omit:
          description: Active Phase omits. A bit string representing a true or false
            value for each of the 8 phases in descending order Ex. 00100001 (Phase
            1+6)
          type: string
          example: '00100001'
        hold:
          description: Active Green holds by Phase. A bit string representing a true
            or false value for each of the 8 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '00100001'
        forceOff:
          description: Active force off to red requests by Phase. A bit string representing
            a true or false value for each of the 8 phases in descending order Ex.
            00100001 (Phase 1+6)
          type: string
          example: '00100001'
        pedestrianClear:
          description: Pedestrian clear state active/inactive by phase. A bit string
            representing a true or false value for each of the 8 phases in descending
            order Ex. 00100001 (Phase 1+6)
          type: string
          example: '00100001'
        walkDont:
          description: Don't walk activity by phase. A bit string representing a true
            or false value for each of the 8 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '00100001'
        walk:
          description: Walk activity by phase. A bit string representing a true or
            false value for each of the 8 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '00100001'
        phases:
          type: array
          description: Status for each phase at time of last update
          items:
            type: object
            properties:
              phase:
                type: integer
                description: Phase ID number
              color:
                type: string
                description: The displayed color of the current Phase
                enum:
                - GREEN
                - RED
                - YELLOW
              vehTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              vehTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              callVehicle:
                type: boolean
                description: A vehicle call has been placed for this phase.
              callPedestrian:
                type: boolean
                description: A pedestrian call has been placed for this phase.
              omit:
                type: boolean
                description: An omit has been placed for this phase.
              omitPedestrian:
                type: boolean
                description: A pedestrian omit has been placed for this phase.
              hold:
                type: boolean
                description: A hold has been placed for this phase.
              forceOff:
                type: boolean
                description: This phase has a force off active
              pedestrianClear:
                type: boolean
                description: Pedestrian clear is active
              walkDont:
                type: boolean
                description: DONT WALK sign is active
              walk:
                type: boolean
                description: WALK sign is active
    Railcrossing:
      type: object
      description: Describes a rail crossing within the facility. Non-instrumented
        crossings reject control requests.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this crosswalk
        uri:
          type: string
          description: The URI which can be used to access this rail crossing directly
        name:
          type: string
          description: A text based description of the rail crossing
        url:
          type: string
          nullable: true
          description: A url with more information about this specific rail crossing
        longitude:
          type: number
          description: The longitude of the centroid of the rail crossing
        latitude:
          type: number
          description: The latitude of the centroid of the rail crossing
        instrument:
          type: string
          enum:
          - crossbuck
          - gated
          nullable: true
          description: The signal type of rail crossing
        audible:
          type: boolean
          description: Is the rail crossing equipped with an audible warning
        gate:
          type: boolean
          description: Is the rail crossing equipped with a gate
        beacon:
          type: string
          enum:
          - wig-wag
          - flashing
          nullable: true
          description: The beacon type used for this rail crossing
        phases:
          type: array
          description: A list of supported phases
          nullable: true
          items:
            type: string
            enum:
            - presignal
            - closing
            - closed
            - opening
            - postsignal
            - open
        state:
          $ref: '#/components/schemas/RailcrossingState'
    RailcrossingState:
      type: object
      description: The current state of the rail crossing
      properties:
        manualCall:
          type: boolean
          description: Manual activation call placed, but has not been serviced.
        activated:
          type: boolean
          description: Is the rail crossing cycle activated
        phase:
          type: string
          description: The current phase of the rail crossing if instrumented
          enum:
          - presignal
          - closing
          - closed
          - opening
          - postsignal
          - open
          nullable: true
        gate:
          type: boolean
          description: True if the gate is down/in motion.
        audible:
          type: boolean
          description: True if audible tone is activated.
        beacon:
          type: boolean
          description: True if beacon is activated.
        updated:
          description: The last time the status of this rail crossing was updated
          type: string
          format: date-time
    Crosswalk:
      type: object
      description: Describes a crosswalk within the facility. Non-instrumented crosswalks
        can be created for discovery purposes, but will not allow for updates to status.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this crosswalk
        uri:
          type: string
          description: The URI which can be used to access this crosswalk directly
        name:
          type: string
          description: A text based description of this crosswalk
        url:
          type: string
          nullable: true
          description: A url with more information about this specific crosswalk
        longitude:
          type: number
          description: The longitude of the centroid of the crosswalk
        latitude:
          type: number
          description: The latitude of the centroid of the crosswalk
        instrument:
          type: string
          enum:
          - solid
          - standard
          - continental
          - dashed
          - ladder
          - zebra
          - scramble
          - uk-pelican
          - uk-puffin
          - uk-toucan
          - uk-pegasus
          description: The painted line pattern for this crosswalk
        refuge:
          type: boolean
          description: Does the crosswalk have a central island pedestrian refuge
        beacon:
          type: string
          enum:
          - phb
          - belisha
          - signal
          - rapid-flash
          nullable: true
          description: The beacon type used for this crosswalk
        phases:
          type: array
          description: A list of valid phases for the crosswalk if equipped with a
            graphical display
          nullable: true
          items:
            type: string
            enum:
            - walk-text
            - do-not-walk-text
            - steady-upraised-hand
            - steady-walking-man
            - flashing-upraised-hand
        countdown:
          type: boolean
          description: Does the crosswalk feature an instrumented phase timer
        audible:
          type: boolean
          description: Is the crosswalk equipped with an audible warning for the crossing/countdown
        visor:
          type: string
          description: The type of visor installed on the beacon
          nullable: true
          enum:
          - egg-crate
          - tunnel
          - cap
        callButton:
          type: boolean
          description: Can a pedestrian place a call or trigger this crosswalk with
            a button
        tactileSurface:
          type: boolean
          description: Does the entrance to the crosswalk feature a tactile surface
        state:
          $ref: '#/components/schemas/CrosswalkState'
    CrosswalkState:
      type: object
      description: The current state of the crosswalk
      properties:
        callPedestrian:
          type: boolean
          description: Pedestrian call placed, but has not been serviced.
        activated:
          type: boolean
          nullable: true
          description: Is the crosswalk activated?
        phase:
          type: string
          description: The current phase of the crosswalk if instrumented
          enum:
          - walk-text
          - do-not-walk-text
          - steady-upraised-hand
          - steady-walking-man
          - flashing-upraised-hand
          nullable: true
        countdownTime:
          description: The time remaining in this crosswalk phase if instrumented.
          type: integer
          nullable: true
        pedestrianClear:
          type: boolean
          description: Pedestrian clear is active
        walkDont:
          type: boolean
          description: DONT WALK sign is active
        walk:
          type: boolean
          description: WALK sign is active
        updated:
          description: The last time the status of this crosswalk was updated
          type: string
          format: date-time
    Gate:
      type: object
      description: Describes a gate within the facility. Non-instrumented gates can
        be created for discovery purposes, but will not allow for updates to status.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this gate
        uri:
          type: string
          description: The URI which can be used to access this gate directly
        name:
          type: string
          description: A text based description of this gate
        url:
          type: string
          nullable: true
          description: A url with more information about this specific gate
        longitude:
          type: number
          description: The longitude of the centroid of the gate
        latitude:
          type: number
          description: The latitude of the centroid of the gate
        electric:
          type: boolean
          description: Is this a manual or electric gate
        arm:
          type: boolean
          description: Does this gate have an arm
        slide:
          type: boolean
          description: Does this gate slide to the side?
        swing:
          type: boolean
          description: Gate swings horizontally to open
        lift:
          type: boolean
          description: Gate lifts to open
        audible:
          type: boolean
          description: Gate has an audible alarm
        state:
          $ref: '#/components/schemas/GateState'
    GateState:
      type: object
      description: The current state of the gate
      properties:
        gateCall:
          type: boolean
          description: Gate open requested, but has not been serviced.
        activated:
          type: boolean
          description: Gate in motion
        open:
          type: boolean
          description: Is the gate open?
          nullable: true
        updated:
          description: The last time the status of this gate was updated
          type: string
          format: date-time
    WeatherAlert:
      type: object
      description: Weather alert
      required:
      - id
      - description
      - instruction
      properties:
        id:
          type: string
          description: An ID number identifying this weather alert
        description:
          type: string
          description: Additional information about the event
        instruction:
          type: string
          description: An advisory message
        state:
          $ref: '#/components/schemas/WeatherAlertState'
    WeatherAlertState:
      type: object
      description: The current state of a weather alert
      required:
      - dateValid
      - onset
      - dateExpire
      - status
      - severity
      - certainty
      - urgency
      - event
      properties:
        event:
          type: string
          description: The event name
        dateValid:
          type: string
          description: The DateTime the alert is effective
        onset:
          type: string
          description: The DateTime of the onset of the event
        dateExpire:
          type: string
          description: The DateTime when the alert expires
        ends:
          type: string
          description: The DateTime of the end of the event
        status:
          type: string
          description: Status (actual, exercise, system, test, draft)
        severity:
          type: string
          description: Severity (extreme, severe, moderate, minor, unknown)
        certainty:
          type: string
          description: Certainty (observed, likely, possible, unlikely, unknown)
        urgency:
          type: string
          description: Urgency (immediate, expected, future, past, unknown)
        updated:
          type: string
          description: The last time the status of this alert was updated.
    Weather:
      type: object
      properties:
        weatherStationID:
          type: integer
          description: Weather station ID with which this weather object is associated
        observationDate:
          type: string
          description: Date of the weather observation
        observationDateTime:
          type: string
          description: Date and time of the weather observation
        et:
          type: string
          description: EvapoTranspiration (ET) is a measurement of the amount of water
            vapor returned to the air
        humidity:
          type: string
          description: Humidity measured in grams of water vapor per cubic meter of
            air (g/m3).
        rainRateMm:
          type: string
          description: Rate of rain fall per hour in millimeters
        tempC:
          type: string
          description: Temperature measured in Celsius
        tempF:
          type: string
          description: Temperature measured in Fahrenheit
        shortForecast:
          type: string
          description: Short Forecast for the hour e.g. Sunny, Mostly Cloudy
        sun:
          type: object
          properties:
            solarRadiation:
              type: string
              description: Solar radiation measured in Watts
            uvIndex:
              type: string
              description: UV index measurement
        wind:
          type: object
          properties:
            direction:
              type: string
              description: direction of wind
            speedKnot:
              type: string
              description: Wind speed measured in knots
            speedMph:
              type: string
              description: Wind speed measured in miles per hour
    WeatherStation:
      type: object
      properties:
        name:
          type: string
          description: Weather station's name or airport code
        url:
          type: string
          description: Station's URL for the Weather API https://www.weather.gov/documentation/services-web-api
        weatherStationType:
          type: string
          enum:
          - WEATHERDOTGOV
          - WEATHERLINK
          description: Type of weather station - ie. weather.gov or Davis Instruments
            WeatherLink
        latitude:
          type: string
          description: Latitude of weather device
        longitude:
          type: string
          description: Longitude of weather device
    Sensor:
      type: object
      description: A sensor or grouping of sensors located within the facility
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor directly
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
          - PACKAGE
          - CAMERA
          - LIDAR
          - RADAR
          - SONAR
          - WIRE
          - BEAM
          - SOFT
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        state:
          $ref: '#/components/schemas/SensorState'
    SensorCamera:
      type: object
      description: A camera sensor located within the facility
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
          - Camera
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        urlStream:
          type: string
          description: A URL for retrieving a stream of video from the camera.
        urlStill:
          type: string
          description: A URL allowing still capture from the camera.
        urlStreamFormat:
          type: string
          description: The file format of the stream endpoint.
        urlStillFormat:
          type: string
          description: The file format of the still endpoint.
        resolutionStream:
          type: string
          description: The maximum resolution of streaming video.
        resolutionStill:
          type: string
          description: The maximum resolution of still capture
        framerate:
          type: number
          description: The max number of frames achievable at max resolution.
        lens:
          type: string
          description: Detail about camera lens information.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorPackage:
      type: object
      description: A grouping of sensors located within the facility
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor package
        uri:
          type: string
          description: The URI which can be used to access this sensor package
        name:
          type: string
          description: A text based description of the sensor package
        url:
          type: string
          description: A url with more information about this specific sensor package
        longitude:
          type: number
          description: The longitude of the centroid of the sensor package
        latitude:
          type: number
          description: The latitude of the centroid of the sensor package
        type:
          type: string
          enum:
          - PACKAGE
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor package manufacturer
        model:
          type: string
          description: The model number/name of the sensor package
        revision:
          type: string
          description: Sensor package revision number/edition information
        ipAddress:
          type: string
          description: The ip address of the sensor package
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor package
        cameras:
          type: array
          description: Cameras included in this sensor package
          items:
            $ref: '#/components/schemas/SensorCamera'
        lidars:
          type: array
          description: LIDARs included in this sensor package
          items:
            $ref: '#/components/schemas/SensorLIDAR'
        radars:
          type: array
          description: RADARs included in this sensor package
          items:
            $ref: '#/components/schemas/SensorRADAR'
        state:
          $ref: '#/components/schemas/SensorState'
    SensorRADAR:
      type: object
      description: A radar sensor located within the facility
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
          - RADAR
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        rangeMax:
          type: number
          description: The maximum range of the sensor.
        rangeAccuracy:
          type: number
          description: The accuracy range rating of the sensor.
        speedAccuracy:
          type: number
          description: The accuracy of speed detection of the sensor
        resolutionUpdateRate:
          type: number
          description: The rate at which the sensor updates.
        objectedTrackedMax:
          type: integer
          description: The maximum number of objects tracked by the sensor.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorLIDAR:
      type: object
      description: A LIDAR sensor located within the facility
      required:
      - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
          - LIDAR
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        rangeTypical:
          type: number
          description: The typical range of the sensor.
        accuracyTypical:
          type: number
          description: The typical accuracy of the sensor.
        resolutionAngularDegree:
          type: number
          description: The max angular resolution of this LIDAR.
        resolutionDistance:
          type: number
          description: The resolution at max distance of this LIDAR.
        beamCount:
          type: integer
          description: The number of beams this LIDAR uses for sensing.
        fovHorizontalDegree:
          type: number
          description: The horizontal FOV of this sensor.
        fovVerticalDegree:
          type: number
          description: The vertical FOV of this sensor.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorState:
      type: object
      description: The current state of a sensor or sensor housing.
      properties:
        enabled:
          type: boolean
          description: True / False representing if the sensor presently powered on.
        updated:
          description: The last time the state of the sensor was updated.
          type: string
          format: date-time
    Robot:
      type: object
      description: Describes a robot.
      required:
      - id
      properties:
        id:
          type: number
          description: An ID number identifying this robot inside OCTANE
        uri:
          type: string
          description: The URI which can be used to access this robot directly
        name:
          type: string
          description: A text based description of the robot (DRI Platform)
        url:
          type: string
          description: A url with more information about this specific robot
        types:
          type: array
          description: Control mode types supported by this robot.
          items:
            type: string
            enum:
            - path
            - waypoint
            - geojson
            - external
        state:
          $ref: '#/components/schemas/RobotState'
    RobotState:
      type: object
      description: The current state of the robot
      properties:
        updated:
          description: The last time the status of this robot was updated
          type: string
          format: date-time
        longitude:
          type: number
          description: The last reported longitude of the robot
        latitude:
          type: number
          description: The last reported longitude of the robot
        scenario:
          $ref: '#/components/schemas/RobotScenario'
        activated:
          description: Boolean value representing is the mode is currently active
          type: boolean
        status:
          description: Additional optional status information provided from the robot
          type: string
        connection:
          type: object
          description: A description of the robot network connection
          properties:
            updated:
              description: The last time this robot contacted OCTANE
              type: string
              format: date-time
            type:
              description: Network interface for connection
              type: string
              enum:
              - DSRC
              - WIFI
              - CELLULAR
              - ZIGBEE
              - ETHERNET
              - DIRECT
            strength:
              description: The connection strength rating 0-100 of the lowest of either
                RX or TX measurements.
              type: integer
            network:
              description: The reported network name (Ex. MWireless, T-Mobile)
              type: string
        charge:
          type: object
          description: A description of the robot power status
          properties:
            updated:
              description: The last time this robot reported power state
              type: string
              format: date-time
            charging:
              description: Is the robot charging?
              type: boolean
            percent:
              description: How much percent of battery life is left? (0-100)
              type: integer
              format: double
            voltage:
              description: The current voltage of the battery
              type: number
        enabled:
          type: boolean
          description: Is the robot powered on without a physical interlock activated?
    RobotScenario:
      properties:
        id:
          type: number
          description: An ID number identifying this robot scenario inside OCTANE
        name:
          description: A short name for a scenario (ex. "Bike Merge", "Open Door")
          type: string
        description:
          description: A long description of a scenario. (ex. "The bicycle will merge
            from a specific point.")
          type: string
        test:
          description: If this robot scenario belongs to a specific overall test,
            the test name will be populated here.
          type: string
        category:
          description: The optional type of this test
          enum:
          - development
          - regression
          - production
          - other
          type: string
        index:
          description: Identifier number to differentiate robots in the same test,
            with different robot based scenarios
          type: number
        type:
          description: A predefined external scenario, path, waypoint, or geojson
            object
          type: string
          enum:
          - path
          - waypoint
          - geojson
          - external
        lock:
          description: The scenario cannot be deleted or modified through the API,
            but is instead system provided or requested as locked by a user. Contact
            API admin to delete or modify.
          type: boolean
        path:
          description: When scenario type is PATH, represents a set of latitude and
            longitude points in order.
          type: array
          items:
            properties:
              longitude:
                type: number
                description: The next longitude destination of the robot.
              latitude:
                type: number
                description: The next latitude destination of the robot.
              velocity:
                type: number
                description: desired max velocity (M/S) heading to this location.
              acceleration:
                type: number
                description: desired max acceleration (M/S^2) heading to this location.
        waypoint:
          description: When scenario is waypoint type, this represents a named latitude/longitude
            point.
          type: object
          properties:
            longitude:
              type: number
              description: The next longitude destination of the robot.
            latitude:
              type: number
              description: The next latitude destination of the robot.
        geojson:
          description: When in scenario is geojson, this represents the currently
            geojson specified path.
          type: object
        external:
          description: Contains data/parameters needed to begin an non-OCTANE defined
            scenario
          type: object
    MaintenanceEquipment:
      type: object
      description: Maintenance equipment - lawnmower
      required:
      - id
      - unitID
      properties:
        id:
          type: integer
          description: An ID number identifying this piece of maintenance equipment
        unitID:
          type: string
          description: The unit ID that the maintenance equipment responds with.
        name:
          type: string
          description: A text based description of the maintenance equipment.
        state:
          type: object
          oneOf:
          - $ref: '#/components/schemas/LawnMowerState'
          description: The current state of the maintenance device
        type:
          type: string
          description: The maintenance equipment type
    MessageBoard:
      type: object
      description: Roadside message board
      required:
      - id
      - unitID
      properties:
        id:
          type: integer
          description: An ID number identifying this message board
        unitID:
          type: string
          description: The unit ID that the message board responds with.  This is
            the manufacturers identification number.
        name:
          type: string
          description: A text based description of this message board
        state:
          $ref: '#/components/schemas/MessageBoardState'
    ArrowBoard:
      type: object
      description: Roadside arrow board
      required:
      - id
      - unitID
      properties:
        id:
          type: integer
          description: An ID number identifying this sign board
        unitID:
          type: string
          description: The unit ID that the sign board responds with.  This is the
            manufacturers identification number.
        name:
          type: string
          description: A text based description of this arrow board
        state:
          $ref: '#/components/schemas/ArrowBoardState'
    MessageBoardState:
      type: object
      description: The current state of the message board
      properties:
        contentType:
          type: string
          description: The current content type ('text' or 'pattern') of the sign
            board
        content:
          type: string
          description: The current content of the sign board
        longitude:
          type: number
          description: The longitude of the centroid of the sign board
        latitude:
          type: number
          description: The latitude of the centroid of the sign board
        enabled:
          type: boolean
          description: Is the messageboard on or off?
    ArrowBoardState:
      type: object
      description: The current state of the arrow board
      properties:
        batteryVoltage:
          type: number
          description: The current voltage on the arrow board
        contentPattern:
          type: string
          description: The current content pattern displayed on the arrow board
        longitude:
          type: number
          description: The longitude of the centroid of the sign board
        latitude:
          type: number
          description: The latitude of the centroid of the sign board
    SignType:
      type: string
      enum:
      - MESSAGE_BOARD
      - ARROW_BOARD
    SafetyEquipmentType:
      type: string
      enum:
      - CONE
      - DELINEATOR
      - BARREL
      - CONCRETE_BARRICADE
      - WATER_BARRICADE
      - STEEL_BARRICADE
      - A_FRAME_BARRICADE
      - TYPE_ONE_BARRICADE
      - TYPE_TWO_BARRICADE
      - BOLLARD
    OctaneModuleType:
      type: string
      enum:
      - ARROW_BOARD
      - MESSAGE_BOARD
      - ROBOT
      - CONE
      - DELINEATOR
      - BARREL
      - CONCRETE_BARRICADE
      - WATER_BARRICADE
      - STEEL_BARRICADE
      - A_FRAME_BARRICADE
      - TYPE_ONE_BARRICADE
      - TYPE_TWO_BARRICADE
      - BOLLARD
    LawnMower:
      type: object
      description: Automated lawnmower at Mcity
      required:
      - id
      - unitID
      properties:
        id:
          type: integer
          description: An ID number identifying this lawnmower
        name:
          type: string
          description: A text based description of this lawnmower
        unitID:
          type: string
          description: The unit ID that the lawnmower responds with.  This is the
            manufacturers identification number.
        state:
          $ref: '#/components/schemas/LawnMowerState'
    LawnMowerState:
      type: object
      description: The current state of the lawn mower
      properties:
        mowerCall:
          type: string
          description: The current running state of the lawnmower
        batteryCharge:
          type: integer
          description: The charge % of the battery
    Facility:
      type: object
      description: Describes the facility.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this Facility
        uri:
          type: string
          description: The URI which can be used to access this facility directly
        name:
          type: string
          description: A text based description of this facility
        url:
          type: string
          description: A url with more information about this facility
        urlMap:
          type: string
          description: A url to a facility map
        longitude:
          type: number
          description: The longitude of the centroid of the facility
        latitude:
          type: number
          description: The latitude of the centroid of the facility
        overlays:
          type: array
          description: Array representing all configured overlays for use in map software
            of the facility.
          items:
            type: object
            properties:
              name:
                type: string
                description: A name describing the contends of the overlay.
              description:
                type: string
                description: A description of the contents of this overlay.
              ul:
                type: object
                description: A latitude/longitude pair representing the upper left
                  point of an overlay.
                properties:
                  latitude:
                    type: number
                    description: Upper left latitude
                  longitude:
                    type: number
                    description: Upper left longitude
              lr:
                type: object
                description: A latitude/longitude pair representing the lower right
                  point of an overlay.
                properties:
                  latitude:
                    type: number
                    description: Upper right latitude
                  longitude:
                    type: number
                    description: Upper right longitude
              url:
                type: string
                description: A url pointing to the overlay file.
              opacity:
                type: integer
                description: A suggested opacity to be used when displaying this layer.
        contact:
          type: object
          description: Object representing all contact information of the facility.
          properties:
            maintenance:
              type: string
              description: Facility Maintenance Contact
            reservations:
              type: string
              description: Facility Reservation Contact
            manager:
              type: string
              description: Facility Manager Contact
            technical:
              type: string
              description: Facility Technical Contact
            emergency:
              type: string
              description: Facility Emergency Contact
        unitDistance:
          type: string
          description: Facility Unit for Distance
        unitMass:
          type: string
          description: Facility Unit for Mass
    V2X:
      type: object
      description: Describes for a V2X (Vehicle to Everything) connected device within
        the facility. status.
      required:
      - id
      properties:
        id:
          type: integer
          description: An ID number identifying this V2X device
        uri:
          type: string
          description: The URI which can be used to access this V2X device directly
        name:
          type: string
          description: A text based description of this V2X device
        url:
          type: string
          description: A url with more information about this specific V2X device
        longitude:
          type: number
          description: The longitude of the centroid of the V2X device, if fixed.
        latitude:
          type: number
          description: The latitude of the centroid of the V2X device, if fixed.
        type:
          type: string
          enum:
          - OBU
          - RSU
        radiosSupported:
          type: array
          description: A list of supported configurations for this device.
          items:
            type: object
            properties:
              radio:
                description: Radio Type
                type: string
                enum:
                - DSRC
                - CV2X
              messageSet:
                type: string
                description: The message set this type is supported in for this radio.
                enum:
                - J2735_201603
                - J2735_201601
                - J2735_201509
                - J2735_200911
                - J2735_200612
                - NTCIP
              messageType:
                type: string
                description: The message type supported.
                enum:
                - BSM
                - PSM
                - SPaT
                - MAP
                - TIM
                - RTCM
              rxEnabled:
                type: boolean
                description: This radio will provide received messages of this type
                  to OCTANE.
              txEnabled:
                type: boolean
                description: This radio allows for sending messages of this type through
                  OCTANE.
        manufacturer:
          type: string
          description: The OBU/RSU manufacturer
        model:
          type: string
          description: The OBU/RSU model
        revision:
          type: string
          description: Revision of the OBU/RSU
        vehicleManufacturer:
          type: string
          description: Manufacturer of vehicle
        vehicleModel:
          type: string
          description: Model of vehicle
        vehicleYear:
          type: string
          description: Release year of Vehicle.
        state:
          oneOf:
          - $ref: '#/components/schemas/V2XRSUState'
          - $ref: '#/components/schemas/V2XOBUState'
          - $ref: '#/components/schemas/V2XVRUState'
    V2XOBUState:
      type: object
      description: Personal Safety Message received from an OBU.
      properties:
        updated:
          description: The date time this message was sent via OCTANE.
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the transmitting V2X device.
        latitude:
          type: number
          description: Latitude of the transmitting V2X device.
        elevation:
          type: number
          description: Elevation of transmitting V2X device. Units in meters
        speed:
          type: number
          description: Reported Velocity of V2X Device. Units in meters/second
        heading:
          type: number
          description: 0 to 359.9875 degrees.
        angle:
          type: number
          description: 0 to 359.9875 degrees.
    V2XVRUState:
      type: object
      description: Vulnerable Road USER (PSM) state.
      properties:
        updated:
          description: The date time this message was sent via OCTANE.
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the transmitting V2X device.
        latitude:
          type: number
          description: Latitude of the transmitting V2X device.
        elevation:
          type: number
          description: Elevation of transmitting V2X device. Units in meters
        speed:
          type: number
          description: Reported Velocity of V2X Device. Units in meters/second
        heading:
          type: number
          description: 0 to 359.9875 degrees.
        type:
          type: string
          description: The type of VRU
          enum:
          - pedestrian
          - bicyclist
          - worker
          - animal
        size:
          type: string
          description: Estimated size of the VRU. Large is > 1.5m
          enum:
          - unknown
          - small
          - large
    V2XRSUState:
      type: object
      description: The current state of the V2X device
      properties:
        enabled:
          type: boolean
          description: Is the radio on or off?
        radiosEnabled:
          type: array
          description: A list of enabled configurations for this device.
          items:
            type: object
            properties:
              radio:
                description: Radio Type
                type: string
                enum:
                - DSRC
                - CV2X
              messageSet:
                type: string
                enum:
                - J2735_201603
                - J2735_201601
                - J2735_201509
                - J2735_200911
                - J2735_200612
                - NTCIP
              messageType:
                type: string
                description: The message type supported.
                enum:
                - BSM
                - PSM
                - SPaT
                - MAP
                - TIM
                - RTCM
              rxEnabled:
                type: boolean
                description: This radio will provide received messages of this type
                  to OCTANE.
              txEnabled:
                type: boolean
                description: This radio allows for sending messages of this type through
                  OCTANE.
        updated:
          description: The last time the status of this device was updated.
          type: string
          format: date-time
        received:
          description: The last time the API received a message from this device.
          type: string
          format: date-time
        longitude:
          type: number
          description: The last known longitude of the V2X device, if movable.
        latitude:
          type: number
          description: The last known latitude of the V2X device, if movable.
    V2XSPaT:
      type: object
      description: Signal Phase and Timing V2X Message decoded.
      properties:
        id:
          description: Identifier given for the intersection this message is related
            to.
          type: string
        messageSet:
          description: The original format this message was broadcast in before decoding.
          type: string
          enum:
          - J2735_201603
          - J2735_201601
          - J2735_201509
          - J2735_200911
          - J2735_200612
          - NTCIP
        updated:
          description: The date time of this message was parsed.
          type: string
          format: date-time
        timeSystem:
          description: System reported time represented as seconds.milliseconds
          type: string
        green:
          description: Phases which are Green. A bit string representing a true or
            false value for each of the 16 phases in descending order Ex. 0000000000100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        yellow:
          description: Phases which are Yellow. A bit string representing a true or
            false value for each of the 16 phases in descending order Ex. 0000000000100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        red:
          description: Phases which are Red. A bit string representing a true or false
            value for each of the 16 phases in descending order Ex. 0000000000100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        pedestrianClear:
          description: Pedestrian clear state active/inactive by phase. A bit string
            representing a true or false value for each of the 16 phases in descending
            order Ex. 00100001 (Phase 1+6)
          type: string
          example: '0000000000100001'
        walkDont:
          description: Don't walk activity by phase. A bit string representing a true
            or false value for each of the 16 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        walk:
          description: Walk activity by phase. A bit string representing a true or
            false value for each of the 16 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        flash:
          description: Flashing indicator by phase. A bit string representing a true
            or false value for each of the 16 phases in descending order Ex. 00100001
            (Phase 1+6)
          type: string
          example: '0000000000100001'
        overlap:
          type: object
          properties:
            green:
              type: string
              example: '000000110000101'
              description: Phases with green overlaps set. A bit string representing
                a true or false value for each of the 16 phases in descending order
                Ex. 00100001 (Phase 1+6)
            yellow:
              type: string
              example: '000000110000101'
              description: Phases with yellow overlaps set. A bit string representing
                a true or false value for each of the 16 phases in descending order
                Ex. 00100001 (Phase 1+6)
            red:
              type: string
              example: '000000110000101'
              description: Phases with red overlaps set. A bit string representing
                a true or false value for each of the 16 phases in descending order
                Ex. 00100001 (Phase 1+6)
            flash:
              type: string
              example: '000000110000101'
              description: Phases with flashing overlaps set. A bit string representing
                a true or false value for each of the 16 phases in descending order
                Ex. 00100001 (Phase 1+6)
        phases:
          type: array
          description: Information about each Phase
          items:
            type: object
            properties:
              phase:
                type: integer
                description: Phase ID number
              color:
                type: string
                description: The displayed color of the current Phase
                enum:
                - GREEN
                - RED
                - YELLOW
              flash:
                type: boolean
                description: Is the signal flashing?
              overlap:
                type: object
                properties:
                  green:
                    type: boolean
                    description: Does this phase have a green overlap set.
                  yellow:
                    type: boolean
                    description: Does this phase have a yellow overlap set
                  red:
                    type: boolean
                    description: Does this phase have a red overlap set
                  flash:
                    type: boolean
                    description: Does this phase have a flash overlap set
              vehTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              vehTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              pedTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              pedTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
    V2XRaw:
      type: object
      description: A raw message delivered from a V2X Device.
      properties:
        id:
          description: Identifier, if known of the transmitting RSU or OBU.
          type: string
        messageSet:
          description: The format, if known, this message is broadcast in.
          type: string
          enum:
          - J2735_201603
          - J2735_201601
          - J2735_201509
          - J2735_200911
          - J2735_200612
          - NTCIP
        updated:
          description: The date and time this message was broadcast by OCTANE.
          type: string
          format: date-time
        data:
          description: The raw payload of the message, HEX encoded.
          type: string
          example: '0000000000100001'
    V2XBSM:
      type: object
      description: Basic Safety Message received from an OBU.
      properties:
        id:
          description: Eight hex character static identifier if available, else temporary
            identifier provided by OBU.
          type: string
        idTemporary:
          description: Temporary identifier
          type: string
        idFixed:
          description: Permanent vehicle identifier for known vehicles.
          type: string
        messageSet:
          description: The original format this message was broadcast in before decoding.
          type: string
          enum:
          - J2735_201603
          - J2735_201601
          - J2735_201509
          - J2735_200911
          - J2735_200612
        vehicleLength:
          description: Vehicle length in Meters
          type: number
        vehicleWidth:
          description: Vehicle width in Meters
          type: number
        updated:
          description: The date time this message was sent via OCTANE.
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the transmitting V2X device.
        latitude:
          type: number
          description: Latitude of the transmitting V2X device.
        elevation:
          type: number
          description: Elevation of transmitting V2X device. Units in meters
        speed:
          type: number
          description: Reported Velocity of V2X Device. Units in meters/second
        heading:
          type: number
          description: 0 to 359.9875 degrees.
        angle:
          type: number
          description: 0 to 359.9875 degrees.
    V2XPSM:
      type: object
      description: Personal Safety Message received from an OBU.
      properties:
        id:
          description: Eight hex character static identifier if available, else temporary
            identifier provided by Personal Safety Device.
          type: string
        messageSet:
          description: The original format this message was broadcast in before decoding.
          type: string
          enum:
          - J2735_201603
          - J2735_201601
          - J2735_201509
          - J2735_200911
          - J2735_200612
        updated:
          description: The date time this message was sent via OCTANE.
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the transmitting V2X device.
        latitude:
          type: number
          description: Latitude of the transmitting V2X device.
        elevation:
          type: number
          description: Elevation of transmitting V2X device. Units in meters
        speed:
          type: number
          description: Reported Velocity of V2X Device. Units in m/s
        heading:
          type: number
          description: 0 to 359.9875 degrees.
        type:
          type: string
          description: The personal safety message user type
          enum:
          - pedestrian
          - bicyclist
          - worker
          - animal
          - godzilla
        size:
          type: string
          description: Estimated size of the PSM. Large is > 1.5m
          enum:
          - unknown
          - small
          - large
    Beacon:
      type: object
      description: A generic device capable of emitting a location and used to track
        a module not already in Octane
      required:
      - id
      - name
      properties:
        id:
          type: string
          nullable: true
          description: MAC address or other unique identifier for the Beacon
        name:
          type: string
          description: A short text based description of the beacon (Mcity RTK Device)
        description:
          type: string
          nullable: true
          description: Additional description which may be helpful - for example,
            'The beacon host was a 1981 Delorean'
        octaneAssociation:
          type: object
          nullable: true
          description: Association with Octane module (if any - ie. Safety).  Updates
            to state will attempt to updated associated device/equipment module/id
          properties:
            module:
              $ref: '#/components/schemas/OctaneModuleType'
            id:
              type: number
              description: Unique identifier for the device/equipment - generally
                retrieved from a GET method in the API
        host:
          type: object
          nullable: true
          description: Size and height of the beacon host (if available)
          properties:
            width:
              type: number
              nullable: true
              description: Width, in meters, of the host carrying the beacon.
            length:
              type: number
              nullable: true
              description: Length, in meters, of the host carrying the beacon.
            height:
              type: number
              nullable: true
              description: Height, in meters, of the host carrying the beacon.
        hostLocation:
          type: object
          nullable: true
          description: Location of the beacon, relative to the host
          properties:
            x:
              type: number
              nullable: true
              description: If a host is carrying the beacon, the location of the beacon
                in meters from the left (x, 0, 0) edge
            y:
              type: number
              nullable: true
              description: If a host is carrying the beacon, the location of the beacon
                in meters from the bottom-left (0, y, 0) edge
            z:
              type: number
              nullable: true
              description: If a host is carrying the beacon, the location of the beacon
                in meters from the base of the host (0,0,z)
        state:
          $ref: '#/components/schemas/BeaconState'
    BeaconState:
      type: object
      description: The current state of the beacon
      properties:
        dynamics:
          type: object
          description: Any or all of the known attributes associated with motion and
            position
          properties:
            longitude:
              type: number
              nullable: true
              description: The last reported longitude of the beacon
            latitude:
              type: number
              nullable: true
              description: The last reported longitude of the beacon
            heading:
              description: The last reported heading, relative to true north, of the
                beacon
              nullable: true
              type: number
            velocity:
              description: The last reported velocity of the beacon (m/s)
              nullable: true
              type: number
            acceleration:
              description: The last reported acceleration of the beacon (m/s)
              nullable: true
              type: number
            elevation:
              description: The last reported elevation of the beacon (m/s)
              nullable: true
              type: number
            updated:
              type: string
              nullable: true
              format: date-time
              description: The last time the dynamics of this beacon were updated
        v2xCommunication:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether PSMs/BSMs should be emitted (can be enabled/disabled
                later)
            type:
              type: string
              enum:
              - pedestrian
              - bicyclist
              - worker
              - animal
              - vehicle
              description: Type of object the beacon is attached to
        connection:
          type: object
          nullable: true
          description: A description of the robot network connection
          properties:
            type:
              description: Network interface for connection
              type: string
              enum:
              - WIFI
              - DSRC
              - CELLULAR
              - ZIGBEE
              - ETHERNET
              - DIRECT
            strength:
              description: The connection strength rating 0-100 of the lowest of either
                RX or TX measurements.
              type: integer
            quality:
              description: The signal quality rating 0-100 of the lowest of either
                RX or TX measurements.
              type: integer
            network:
              description: The reported network name (Ex. MWireless, T-Mobile)
              type: string
            updated:
              description: The last time the connection information of this beacon
                were updated
              type: string
              format: date-time
        charge:
          type: object
          description: A description of the beacon power status
          properties:
            updated:
              description: The last time this beacon reported power state
              type: string
              format: date-time
            charging:
              description: Is the beacon charging?
              type: boolean
            percent:
              description: How much percent of battery life is left? (0-100)
              type: integer
              format: double
            voltage:
              description: The current voltage of the battery
              type: number
    APIError:
      type: object
      properties:
        internalCode:
          type: integer
          format: int32
          description: The internal error code encountered by the API
        status:
          type: integer
          description: The HTTP error code returned with this error object. (legacy)
        httpStatusCode:
          type: integer
          description: The HTTP error code returned with this error object.
        message:
          type: string
          description: The error message encountered
        humanMessage:
          type: string
          description: A human readable HTTP error code
    Scenario:
      type: object
      properties:
        id:
          type: integer
          description: ID of the scenario
        name:
          type: string
          description: Name of the scenario
        owner:
          type: string
          description: Email of the scenario owner
        workspace:
          type: string
          description: The XML structure containing the code to be run in the scenario
        lastModified:
          type: string
          format: date-time
          description: Time that the scenario was last modified
    UserMessage:
      type: object
      properties:
        message:
          type: string
          description: A message
        user:
          type: string
          description: The user name provided as the message sender.
        time:
          type: string
          format: date-time
          description: Time that the message was sent.
    IPCMessage:
      type: object
      properties:
        payload:
          type: string
          description: A message payload object to be shared related to the listed
            type.
        type:
          type: string
          description: A string representing the type of IPC message. Reserved IPC
            types are shown below. Contact mcity-engineering@umich.edu to request
            a reserved type.
          enum:
          - POI
          - OVERLAY
          - SCENARIO
        time:
          type: string
          format: date-time
          description: Time that the message was sent to the server. This is server
            generated.
    FacilityMessage:
      type: object
      properties:
        message:
          type: string
          description: A message containing a notification.
        type:
          type: string
          description: A type describing the message
          enum:
          - NOTIFY
          - WEATHER
          - SCHEDULE
        time:
          type: string
          format: date-time
          description: Time that the notification was sent.
