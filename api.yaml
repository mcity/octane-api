openapi: 3.0.0
info:
  description: Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous
    and connected vehicle test facilities/cities.
  version: 0.0.8
  title: Mcity Control API
  contact:
    name: API support
    email: mcity-engineering@umich.edu
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://mcity.um.city/api
    description: Production server
  - url: https://mvillage.um.city/api
    description: Test server
  - url: http://localhost:5000/api
    description: Dev server
security:
  - APIKeyHeader:
      []
tags:
  - name: Facility
    description: Information about the facility
    externalDocs:
      description: Discover Mcity
      url: https://mcity.umich.edu
  - name: Intersections
    description: Management of intersections
    externalDocs:
      description: Discover Mcity's intersections
      url: https://members.um.city/wiki/track/intersections
  - name: Signals
    description: Management of traffic signals
    externalDocs:
      description: Discover Mcity's traffic signals
      url: https://members.um.city/wiki/track/signals
  - name: Rail
    description: Management of rail crossings.
    externalDocs:
      description: Discover Mcity's rail service
      url: https://members.um.city/wiki/track/rail
  - name: Crosswalks
    description: Management of crosswalks
    externalDocs:
      description: Discover Mcity's crosswalks
      url: https://members.um.city/wiki/track/crosswalks
  - name: Gates
    description: Control of facility gates
    externalDocs:
      description: Discover Mcity's gates
      url: https://members.um.city/wiki/track/gates
  - name: Lights
    description: Control and enumeration of lighting 
    externalDocs:
      description: Discover Mcity's Lights
      url: https://members.um.city/wiki/track/lights
  - name: Sensors
    description: Raw sensor feed, enumeration, and control
    externalDocs:
      description: Discover Mcity's sensors
      url: https://members.um.city/wiki/track/sensors
  - name: WebSockets-Channels
    description: EXPERIMENTAL - Socket.IO websocket supported channels documented as \</namespace>/\<channel>/. Websocket testing is not supported within this UI.
    externalDocs:
      description: Socket.io documentation
      url: https://socket.io/
  - name: WebSockets-Events
    description: EXPERIMENTAL - Socket.IO websocket events supported by socket-io. Documented as \</namespace>/\<event>/. Websocket testing is not supported within this UI.
    externalDocs:
      description: Socket.io documentation
      url: https://socket.io/
  - name: Management
    description: Functions reserved for facility administration and system processes.
    externalDocs:
      description: The Mcity API system process.
      url: https://mcity.umich.edu/
  - name: V2X
    description: EXPERIMENTAL - V2X RSU and OBU management, near real time messages available via WebSocket
    externalDocs:
      description: Discover Mcity's V2X Technology
      url: https://members.um.city/wiki/track/v2x
  - name: Scenarios
    description: Management of test case scenarios
    externalDocs:
      description: (TODO:) Link to info about scenarios
      url: https://mcity.umich.edu
paths:
  /lights:
    get:
      tags:
        - Lights
      summary: Return a list of light objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lights:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Light'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Lights
      summary: Sets features on all configured lights that support a feature.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Default is 0. 1 causes the light to turn on.
                    dimLevel:
                      type: integer
                      description: Default is 0. > 0 setting toggles the dim percentage of the light.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestIDs:
                    type: array
                    description: Work request IDs
                    items:
                      type: string

        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /light/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A light ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Lights
      summary: Return a light object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  light:
                    type: object
                    description: A single light
                    $ref: '#/components/schemas/Light'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Lights
      summary: Allows control to a light.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: Allows control to state of a specific light.
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Default is 0. 1 causes the light to turn on.
                    dimLevel:
                      type: integer
                      description: Default is 0. > 0 setting toggles the dim percentage of the light.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/light:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing light_* events.
      responses:
        200:
          description: Join of Channel
  /octane/light_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when the state of a light is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Light update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this light fixture.
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/LightState'
  /octane/light_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event published when request to change state was made on this light.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Light'
  /intersections:
    get:
      tags:
        - Intersections
      summary: Return a list of intersection objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  intersections:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Intersection'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Intersections
      summary: Sets features on all configured intersections that support a feature.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    reset:
                      type: boolean
                      description: Request a reset of the timing on all traffic
                        controllers. Reset is performed before other items in
                        this request.
                    enabled:
                      type: boolean
                      description: Request the signal heads for this intersection be switched 
                        on or off. This does not shut off the controller.
                    flash:
                      type: boolean
                      description: Toggles the intersections between all way flash and a
                        free timed mode.
                    timePaused:
                      type: boolean
                      description: Pause or un-pause ring time of this intersection. Causes
                        all lights to freeze in current state when set True.
                    timeClearControl:
                      type: integer
                      description: Default is 0 - disabled. > 0 setting causes 
                        control commands to be automatically cleared this
                        input number of seconds.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestIDs:
                    type: array
                    description: Work request IDs
                    items:
                      type: string
                        
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: An intersection ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Intersections
      summary: Return an intersection object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  intersection:
                    type: object
                    description: A single intersection
                    $ref: '#/components/schemas/Intersection'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Intersections
      summary: Allows control one to many phases within an intersection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: "All values are bit strings presenting phases 1-8 in
                    descending order. Phase 1 and 6: 00100001"
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Turn signal heads at this intersection on or off.
                    omit:
                      type: string
                      description: Omit specified phases. A bit string representing request
                        for all 8 phases in descending order.
                      example: "00100001"
                    hold:
                      type: string
                      description: Hold specified phases green. A bit string representing
                        request for all 8 phases in descending order.
                      example: "01000010"
                    forceOff:
                      type: string
                      description: Force off specified phases. A bit string representing
                        request for all 8 phases in descending order.
                      example: "00100010"
                    omitPedestrian:
                      type: string
                      description: Omit pedestrian call for specified phases. A bit string
                        representing 8 phases in descending order.
                      example: "00010001"
                    callVehicle:
                      type: string
                      description: A vehicle call will be placed on specified phases. A
                        bit string representing 8 phases in descending order.
                      example: "00010001"
                    callPedestrian:
                      type: string
                      description: A pedestrian call will be placed on specified phases. 8
                        phases in descending order.
                      example: "10001001"
                    reset:
                      type: boolean
                      description: Request a reset of the timing on this traffic
                        controller. Reset is performed before other items in
                        this request.
                    flash:
                      type: boolean
                      description: Toggles the intersection between an all way flash and a
                        free timed mode.
                    timePaused:
                      type: boolean
                      description: Pause or un-pause ring time of this intersection. Causes
                        all lights to freeze in current state.
                    timeClearControl:
                      type: integer
                      description: Default is 0 - disabled. Changing this per traffic
                        controller causes control commands to be cleared after
                        input number of seconds.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/phases:
    parameters:
      - in: path
        name: id
        required: true
        description: An intersection ID string.
        schema:
          type: integer
          minimum: 1
    get:
      summary: Return list of phases configured for an intersection
      tags:
        - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: A list of phases for this intersection
                items:
                  $ref: '#/components/schemas/Phase'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/signals:
    parameters:
      - in: path
        name: id
        required: true
        description: An intersection ID string.
        schema:
          type: integer
          minimum: 1
    get:
      summary: Return list of traffic signal configured for an intersection
      tags:
        - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signals:
                    type: array
                    description: A list of signals for this intersection
                    items:
                      $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/crosswalks:
    parameters:
      - in: path
        name: id
        required: true
        description: An intersection ID string.
        schema:
          type: integer
          minimum: 1
    get:
      summary: Return list of crosswalks within an intersection
      tags:
        - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: A list of crosswalks within this intersection
                items:
                  $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /intersection/{id}/stages:
    parameters:
      - in: path
        name: id
        required: true
        description: An intersection ID string.
        schema:
          type: integer
          minimum: 1
    get:
      summary: Return list of suggested control groupings for the intersection (stages)
      tags:
        - Intersections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: A list of phases for this intersection
                items:
                  $ref: '#/components/schemas/Stage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/intersection:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing intersection_* events.
      responses:
        200:
          description: Join of Channel
  /octane/intersection_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when the state of an intersection is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Intersection event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this intersection
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/IntersectionState'
  /octane/intersection_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event published when request to change state was made on this intersection.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Intersection'
  /signals:
    get:
      tags:
        - Signals
      summary: Return a list of signal objects describing all instrumented signals
        within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signals:
                    type: array
                    description: A list of signals
                    items:
                      $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /signal/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A signal ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Signals
      summary: Return an signal object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  signal:
                    type: object
                    description: A single signal
                    $ref: '#/components/schemas/Signal'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Signals
      summary: Allows control of a single signal set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  description: The specified object you are sending.
                  type: object
                  properties:
                    reset:
                      type: boolean
                      description: Request a reset of the timing on this traffic
                        controller. Reset is performed before other items in
                        this request.
                    flash:
                      type: boolean
                      description: Toggles the intersection between an all way flash and a
                        free timed mode.
                    left:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                            - red
                            - yellow
                            - green
                    right:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                            - red
                            - yellow
                            - green
                    straight:
                      type: object
                      properties:
                        color:
                          type: string
                          enum:
                            - red
                            - yellow
                            - green
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/signal:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing intersection_* events.
      responses:
        200:
          description: Join of Channel
  /octane/signal_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on update of signal state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Signal event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this signal
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/SignalState'
  /octane/signal_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when a request to a signal is being serviced.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Signal'
  /railcrossings:
    get:
      tags:
        - Rail
      summary: Return a list of rail crossing objects describing all instrumented
        crossings within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  railcrossings:
                    type: array
                    description: A list of rail crossings
                    items:
                      $ref: '#/components/schemas/Railcrossing'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /railcrossing/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A rail crossing ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Rail
      summary: Return an rail crossing object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  railcrossing:
                    type: object
                    description: A single railcrossing
                    $ref: '#/components/schemas/Railcrossing'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Rail
      summary: Updates an existing rail crossing status, allowing for triggering.
        Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    manualCall:
                      type: boolean
                      description: Activate rail crossing cycle (close, wait, open)
                    manualCallTimeOverride:
                      type: integer
                      description: Specify a length of time the gate should stay in the closed position during a manual call. This setting does not persist.
                    activated:
                      type: boolean
                      description: Activate or deactivate the rail crossing.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/railcrossing:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing railcrossing_* events.
      responses:
        200:
          description: Join of Channel
  /octane/railcrossing_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on update of railcrossing state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Rail crossing event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this rail crossing
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/RailcrossingState'
  /octane/railcrossing_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when a request to a railcrossing is being serviced.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Railcrossing'
  /crosswalks:
    get:
      tags:
        - Crosswalks
      summary: Return a list of crosswalk objects describing all instrumented crossings
        within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalks:
                    type: array
                    description: A list of crosswalks
                    items:
                      $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /crosswalk/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A crosswalk ID number.
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Crosswalks
      summary: Return a crosswalk object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  crosswalk:
                    type: object
                    description: A single crosswalk
                    $ref: '#/components/schemas/Crosswalk'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Crosswalks
      summary: Updates an existing crosswalk status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    pedestrianCall:
                      type: boolean
                      description: Activate crosswalk cycle
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/crosswalk:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing crosswalk_* events.
      responses:
        200:
          description: Join of Channel
  /octane/crosswalk_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on update of railcrossing state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Crosswalk event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this crosswalk
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/CrosswalkState'
  /octane/crosswalk_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when a request to a railcrossing is being serviced.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Crosswalk'
  /gates:
    get:
      tags:
        - Gates
      summary: Return a list of gate objects describing all instrumented gates
        within the facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gates:
                    type: array
                    description: A list of Gates
                    items:
                      $ref: '#/components/schemas/Gate'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /gate/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A gate ID number.
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - Gates
      summary: Return a gate object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gate:
                    type: object
                    description: A single gate
                    $ref: '#/components/schemas/Gate'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Gates
      summary: Updates an existing gate status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    gateCall:
                      type: boolean
                      description: Activate gate cycle
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/gate:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing gate_* events.
      responses:
        200:
          description: Join of Channel
  /octane/gate_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on update of gate state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Gate event update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this gate
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/GateState'
  /octane/gate_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when a request to a gate is being serviced.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Gate'
  /sensors:
    get:
      tags:
        - Sensors
      summary: Return a list of sensors at this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  sensors:
                    type: array
                    description: A list of Sensors
                    items:
                      $ref: '#/components/schemas/Sensor'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/packages:
    get:
      tags:
        - Sensors
      summary: Return a list of sensors packages and groupings from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  packages:
                    type: array
                    description: A list of Sensor packages
                    items:
                      $ref: '#/components/schemas/SensorPackage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/cameras:
    get:
      tags:
        - Sensors
      summary: Return a list of cameras from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  cameras:
                    type: array
                    description: A list of Sensor cameras
                    items:
                      $ref: '#/components/schemas/SensorCamera'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/lidars:
    get:
      tags:
        - Sensors
      summary: Return a list of LIDAR sensors from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lidars:
                    type: array
                    description: A list of Sensor LIDAR
                    items:
                      $ref: '#/components/schemas/SensorLIDAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensors/radars:
    get:
      tags:
        - Sensors
      summary: Return a list of RADAR sensors from this facility.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  radars:
                    type: array
                    description: A list of Sensor RADAR
                    items:
                      $ref: '#/components/schemas/SensorRADAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A sensor ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Sensors
      summary: Return information about a sensor.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  gate:
                    type: object
                    description: A single sensor
                    $ref: '#/components/schemas/Sensor'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/package/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A sensor ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Sensors
      summary: Return information about a grouping of sensors, known as a sensor package, with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  package:
                    type: object
                    description: A single sensor package
                    $ref: '#/components/schemas/SensorPackage'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/camera/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A sensor ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Sensors
      summary: Return information about a camera with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  camera:
                    type: object
                    description: A single sensor camera
                    $ref: '#/components/schemas/SensorCamera'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/lidar/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A sensor ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Sensors
      summary: Return information about a LIDAR with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  lidar:
                    type: object
                    description: A single sensor LIDAR
                    $ref: '#/components/schemas/SensorLIDAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /sensor/radar/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A sensor ID string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Sensors
      summary: Return information about a RADAR with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  radar:
                    type: object
                    description: A single sensor RADAR
                    $ref: '#/components/schemas/SensorRADAR'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Sensors
      summary: Updates a sensor state. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the sensor on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/sensor:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing sensor_* events.
      responses:
        200:
          description: Join of Channel
  /octane/sensor_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted when the state of a sensor is updated.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Sensor update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this sensor
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/SensorState'
  /octane/sensor_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event published when request to change state was made on this sensor.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/SensorState'
  /facility:
    get:
      tags:
        - Facility
      summary: Return information about the facility and current reservation.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  facility:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Facility'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/facility:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing facility_* events.
      responses:
        200:
          description: Join of Channel
  /octane/facility_message:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted for scheduling notifications, staff request, or emergency.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Facility'
  /octane/facility_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted for facility wide requests.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Facility' 
  /octane/facility_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted for facility wide status updates.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Facility'
  /v2x:
    get:
      tags:
        - V2X
      summary: Return a list of V2X devices known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  v2xs:
                    type: array
                    description: A list of V2X devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsus:
    get:
      tags:
        - V2X
      summary: Return a list of V2X RSUs known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  rsus:
                    type: array
                    description: A list of V2X RSU devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - V2X
      summary: Updates all existing and capable V2x RSUs. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/obus:
    get:
      tags:
        - V2X
      summary: Return a list of V2X OBUs known to OCTANE.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  obus:
                    type: array
                    description: A list of V2X OBU devices.
                    items:
                      $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - V2X
      summary: Updates an existing and capable V2X OBUs. Returns request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A V2X ID number.
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  v2x:
                    type: object
                    description: A single V2X device
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A V2X ID number.
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  rsu:
                    type: object
                    description: A single V2X RSU device
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Is the radio on or off?
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/rsu/{id}/bsm:
    parameters:
      - in: path
        name: id
        required: true
        description: A V2X ID number.
        schema:
          type: integer
          minimum: 1
    post:
      tags:
        - V2X
      summary: For RSUs with support, pack posted data into active protocol format and broadcasts the BSM.
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A V2X BSM to be sent.
              $ref: '#/components/schemas/V2XBSM'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /v2x/obu/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A V2X ID number.
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - V2X
      summary: Return a v2x object with the specified ID.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  obu:
                    type: object
                    description: A single V2X OBU device
                    $ref: '#/components/schemas/V2X'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - V2X
      summary: Updates an existing v2x status, allowing for triggering. Returns
        request ID on success.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: is the radio on or off?
                    longitude:
                      type: number
                      description: The longitude of the V2X device.
                    latitude:
                      type: number
                      description: The latitude of the V2X device.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/v2x:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing requests and updates from V2X devices. Provides notifications when new devices are heard from.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_raw:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known RSUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_raw:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known OBUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_parsed:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing raw v2x_* events from all known RSUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_parsed:
    get:
      tags:
        - WebSockets-Channels
      summary: COMING SOON - Channel used for publishing raw v2x_* events from all known OBUs.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_[id]_raw:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing all raw v2x_* events from a specific RSU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_[id]_raw:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel used for publishing all raw v2x_* events from a specific OBU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_rsu_[id]_parsed:
    get:
      tags:
        - WebSockets-Channels
      summary: JSON formatted version of events from a specific RSU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_obu_[id]_parsed:
    get:
      tags:
        - WebSockets-Channels
      summary: formatted version of events from a specific OBU.
      responses:
        200:
          description: Join of Channel
  /octane/v2x_update:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on update of V2X device state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: V2X Device update
                properties:
                  id:
                    type: string
                    description: An ID number identifying this V2X Device
                  serviced:
                    type: string
                    format: date-time
                    description: UTC date time representing when the message was published.
                    example: "2019-03-16T16:47:04.123-4:00"
                  state:
                    $ref: '#/components/schemas/V2X'
              
  /octane/v2x_request:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on request to a V2X device.
      responses:
        200:
          description: Success
          content:
            "*/*":
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2X'
  /octane/v2x_new:
    get:
      tags:
        - WebSockets-Events
      summary: COMING SOON - Event emitted when a new V2X device is heard from and added to the V2X device listing.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2X'
  /octane/v2x_raw:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted on message between V2X devices.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V2XRaw"
  /octane/v2x_SPaT:
    get:
      tags:
        - WebSockets-Events
      summary: On receipt of a V2X SPaT message, this event is emitted with a parsed version of the message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/V2XSPaT'
  /octane/v2x_BSM:
    get:
      tags:
        - WebSockets-Events
      summary: On receipt of a V2X BSM message, this event is emitted with a parsed version of the message.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2XBSM'
  /management/modules:
    get:
      tags:
        - Management
      summary: Return a list of Modules supported by this instance of Octane
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  modules:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      type: string
                      example: [Crosswalk, Intersections, V2X]
        400:
          $ref: "#/components/responses/PoorFormError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: Internal server error
  /management/favorites:
    get:
      tags:
        - Management
      summary: "Retrieve list of all favorites."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  favorites:
                    type: array
                    description: A list of the users Favorite items from each module.
                    items:
                      $ref: '#/components/schemas/Favorite'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/favorite:
    post:
      tags:
        - Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                moduleName:
                  type: string
                favoriteID:
                  type: integer
      summary: "Add a favorite to database."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/favorite/{moduleName}/{favoriteId}:
    delete:
      parameters: 
        - name: moduleName
          in: path
          required: true
          description: Type of infrastructure
          schema:
            type: string
            description: Type of infrastructure
        - name: favoriteId
          in: path
          required: true
          description: Type of infrastructure id
          schema:
            type: integer
            description: Type of infrastructure id
      tags:
      - Management
      summary: "Delete a favorite from the database."
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: A message regarding the status of the deletion.
                properties:
                  message:
                    type: string
                    description: The delete request was successful.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/polling/intersections:
    patch:
      tags:
        - Management
      summary: "TOKEN TYPE: ADMIN. Start/Stop Intersection Traffic signal polling."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Starts or terminates all polling processes.
        description: Modifications to the process that controls intersection updates
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/polling/power:
            patch:
              tags:
                - Management
              summary: "TOKEN TYPE: ADMIN. Start/Stop polling of intersection power state."
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        state:
                          type: object
                          properties:
                            enabled:
                              type: boolean
                              description: Starts or terminates all power polling processes.
                description: Modifications to the process that controls power updates
              responses:
                200:
                  description: Success
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          requestID:
                            type: string
                            description: Work request ID.
                400:
                  $ref: '#/components/responses/PoorFormError'
                401:
                  $ref: '#/components/responses/UnauthorizedError'
                404:
                  $ref: '#/components/responses/NotFoundError'
                500:
                  description: Internal server error      
  /management/facility/reset:
    post:
      tags:
        - Management
      summary: "TOKEN TYPE: USER. Reset controllable items within the facility."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: object
                  properties:
                    confirm:
                      type: boolean
                      description: Confirms the reset of the facility.
        description: Modify the state of all devices in the facility
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/device/callback:
    post:
      tags:
        - Management
      summary: "TOKEN TYPE: DEVICE. Handles callbacks from physical devices connected
        to API."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: Data from event
                event:
                  type: string
                  description: Remote Event name
                coreid:
                  type: string
                  description: Device ID of calling device
                published_at:
                  type: string
                  description: The time this event was published.
        description: External devices use this to modify state of API managed device state.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestID:
                    type: string
                    description: Work request ID.
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /management/token:
    post:
      tags:
        - Management
      summary: "TOKEN TYPE: TOKEN. Creates a new USER type token with API access
        between a specific date and time."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of token owner.
                desc:
                  type: string
                  description: Event Identifier
                dateValid:
                  type: string
                  format: date-time
                  description: UTC valid date time
                  example: "2019-03-16T16:47:04.123-4:00"
                dateExpire:
                  type: string
                  format: date-time
                  description: UTC expiration date time
                  example: "2019-03-16T16:47:04.123-4:00"
        description: Request for a new token to be created. Dates are in format of 2019-03-16T16:47:04.123-4:00
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Newly generated access token
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /octane/user:
    get:
      tags:
        - WebSockets-Channels
      summary: Channel for IPC, Timing, and direct messages. Publishes user_* events.
      responses:
        200:
          description: Join of Channel
  /octane/user_message:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted to other users when a user emits in the user channel.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: A message a user sent.
                properties:
                  message:
                    type: string
                    description: The message to be sent to other users.
    post:
      tags:
        - WebSockets-Events
      summary: Event to be submitted for broadcast to the user channel only.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A message a user wants to broadcast
              properties:
                message:
                  type: string
                  description: The message to be sent to other users of the system.
  /octane/join:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted to other users when a user joins a channel successfully.
      responses:
        200:
          description: Success
    post:
      tags:
        - WebSockets-Events
      summary: Event to be submitted for user to join a specified channel.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The channel a user wishes to join.
              properties:
                channel:
                  type: string
                  description: Channel to join.
  /octane/leave:
    get:
      tags:
        - WebSockets-Events
      summary: Event emitted to other users when a user leaves a channel successfully.
      responses:
        200:
          description: Success
    post:
      tags:
        - WebSockets-Events
      summary: Event to be submitted for user to leave a specified channel.
      responses:
        200:
          description: Success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: The channel a user wishes to leave
              properties:
                channel:
                  type: string
                  description: Channel to leave.
  /octane/channels:
    get:
      tags:
        - WebSockets-Events
      summary: Emitted in response to request for OCTANE channels.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Channel name
                    subscribed:
                      type: boolean
                      description: User is currently subscribed to this channel.
    post:
      tags:
        - WebSockets-Events
      summary: Event to be submitted to request current users channels and all valid channels.
      responses:
        200:
          description: Success
  /scenarios:
    get:
      tags:
        - Scenarios
      summary: Return a list of scenario objects.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenarios:
                    type: array
                    description: A list of modules supported by octane
                    items:
                      $ref: '#/components/schemas/Scenario'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Internal server error
  /scenario/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: A scenario id string.
        schema:
          type: string
          minimum: 1
    get:
      tags:
        - Scenarios
      summary: Return a scenario object with the specified id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  scenario:
                    type: object
                    $ref: '#/components/schemas/Scenario'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    patch:
      tags:
        - Scenarios
      summary: Update an existing scenario
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenario:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the scenario
                      workspace:
                        type: string
                        description: The XML structure containing the code to be run in the scenario
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    type: object
                    $ref: '#/components/schemas/Scenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
    delete:
      tags:
      - Scenarios
      summary: "Delete a scenario from the database"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: A message regarding the status of the deletion.
                properties:
                  message:
                    type: string
                    description: The delete request was successful.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error
  /scenario:
    post:
      tags:
        - Scenarios
      summary: Create a new scenario object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenario:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the scenario
                      workspace:
                        type: string
                        description: The XML structure containing the code to be run in the scenario
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    type: object
                    $ref: '#/components/schemas/Scenario'
        400:
          $ref: '#/components/responses/PoorFormError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Internal server error

externalDocs:
  description: Mcity website
  url: https://mcity.umich.edu
components:
  responses:
    UnauthorizedError:
      description: 'Authorization Error - API key is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    PoorFormError:
      description: 'Request to this endpoint was not appropriately formed.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    NotFoundError:
      description: 'Requested ID does not exist.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    NotAllowedError:
      description: 'Request was denied because resource does not support this action, or the action results in an invalid state.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    TeapotError:
      description: Request to create/modify Teapot, but I am already a teapot.
      content:
        "*/*":
          schema:
            $ref: '#/components/schemas/APIError'
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      description: Tokens that expire sent to users to utilize the API
      in: header
      name: X-API-KEY
  schemas:
    Stage:
      type: object
      description: Describes a suggested control grouping for an intersection. Stages are
        lights that work together to make non-conflicting sets of phases.
      properties:
        name:
          type: string
          description: A text description of the phases controlled by this stage.
        controlGroup:
          type: string
          description: A bit string that can be used to hold/omit/force off or utilize other control functions for non-conflicting portions of an
            intersection or signal.
          example: "00100001"
    Phase:
      type: object
      description: Describes a set of one or more signal heads that are wired together, all
        heads will show the same indication
      properties:
        number:
          type: integer
          description: The phase number as configured on the traffic controller
        bound:
          type: string
          description: The direction of traffic this phase controls. A signal with this
            phase would face the opposite direction.
          enum:
            - north
            - south
            - east
            - west
        turn:
          type: string
          description: Direction of movement this signal is setup to control
          enum:
            - left
            - right
            - through
    Signal:
      type: object
      description: Describes a collection of signal heads facing a specific direction/mount
        type. Their state is also known as a PHASE in traffic control systems.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this signal set
        uri:
          type: string
          description: The URI which can be used to access this signal set directly
        name:
          type: string
          description: A text based description of the signal
        url:
          type: string
          description: A url with more information about this specific signal
        longitude:
          type: number
          description: The longitude of the centroid of the signal set
        latitude:
          type: number
          description: The latitude of the centroid of the signal set
        instrument:
          type: string
          enum:
            - light
          nullable: true
          description: The signal type
        directionFacing:
          type: string
          enum:
            - north
            - east
            - south
            - west
          description: The direction the signal head is facing
        directionTraffic:
          type: string
          enum:
            - north
            - east
            - south
            - west
          description: The direction of traffic this signal controls.
        orientation:
          type: string
          description: Describes the mounting orientation of the signal heads
          enum:
            - horizontal
            - vertical
        height:
          type: number
          description: Height of signal head to road surface in facility units.
          nullable: true
        pole:
          type: boolean
          description: Is signal mounted to a side pole.
        mast:
          type: boolean
          description: Is signal mounted to a mast off the pole pole.
        mastAngle:
          type: boolean
          description: Is mast angled off the pole
        wire:
          type: boolean
          description: Is the signal mounted by wire to the mast or pole
        backplate:
          type: boolean
          description: Does the signal have a backplate?
        left:
          type: boolean
          description: This signal set has a signal pointing in this direction
        right:
          type: boolean
          description: This signal set has a signal pointing in this direction
        straight:
          type: boolean
          description: This signal set has a signal pointing in this direction
        state:
          $ref: '#/components/schemas/SignalState'
    SignalState:
      type: object
      description: The current state of the signal set
      properties:
        left:
          type: object
          description: The current state left turn signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              nullable: true
              enum:
                - red
                - yellow
                - green
            status:
              type: string
              description: Light status
              enum:
                - steady
                - flashing
                - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
        right:
          type: object
          description: The current state right turn signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              nullable: true
              enum:
                - red
                - yellow
                - green
            status:
              type: string
              description: Light status
              enum:
                - steady
                - flashing
                - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
        straight:
          type: object
          description: The current state straight signal if present
          nullable: true
          properties:
            color:
              type: string
              description: Color of signal if active
              enum:
                - red
                - yellow
                - green
              nullable: true
            status:
              type: string
              description: Light status
              enum:
                - steady
                - flashing
                - disabled
            vehTimeMin:
              type: number
              description: Minimum time (seconds) until next phase.
            vehTimeMax:
              type: number
              description: Maximum time (seconds) until next phase.
            updated:
              description: The last time the status of this signal was updated
              type: string
              format: date-time
    Favorite:
      type: object
      properties:
        id:
          type: integer
          title: database entry id
        moduleName:
          type: string
          title: infrastructure type
        favoriteID: 
          type: integer
          title: infrastructure type id
    Light:
      type: object
      description: Describes a street light within the facility. Non-instrumented street lights reject control requests.  
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this street light
        uri:
          type: string
          description: The URI which can be used to access this street light directly
        name:
          type: string
          description: A text based description of the street light
        url:
          type: string
          description: A url with more information about this specific street light
        longitude:
          type: number
          description: The longitude of the centroid of the street light
        latitude:
          type: number
          description: The latitude of the centroid of the street light
        maxWattPower:
          type: number
          description: The maximum watt power of the street light
        manufacturer:
          type: string
          description: The manufacturer of the street light
        model:
          type: string
          description: The model of the street light
        controlType:
          type: string
          description: The control type of the street light
        state:
          $ref: '#/components/schemas/LightState'
    LightState:
      type: object
      description: The current state of the street light
      properties:
        updated:
          description: The last time the status of this street light was updated
          type: string
          format: date-time
        enabled:
          description: Boolean value representing if the street light is on
          type: boolean
        dimLevel:
          description: The current dim level of the street light
          type: integer
    Intersection:
      type: object
      description: Intersections can be collections of traffic devices such as signals,
        signs, and crosswalks in multiple directions.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this intersection
        uri:
          type: string
          description: The URI which can be used to access this signal set directly
        name:
          type: string
          description: A text based description of the signal
        url:
          type: string
          description: A url with more information about this specific intersection
        longitude:
          type: number
          description: The longitude of the centroid of the signal set
        latitude:
          type: number
          description: The latitude of the centroid of the signal set
        instrument:
          type: string
          enum:
            - signal
            - stop
            - yield
            - ramp
          description: The intersection instrument type
        style:
          type: string
          enum:
            - straight
            - three-way
            - four-way
            - five-way
          description: Describes the number of road segments entering the intersection
        streetMain:
          type: string
          example: Main Street
          description: The name of the street which is considered to be the main street by
            the traffic controller
        streetCross:
          type: string
          example: Cross Street
          description: The name of the second street which is considered the cross street
            by the traffic controller
        v2xIntersectionId:
          type: string
          example: "2550"
          description: "Identifier for this intersection used in V2X messages such as MAP and SPaT."
        state:
          $ref: '#/components/schemas/IntersectionState'
    IntersectionState:
      type: object
      description: The current state of the intersection
      properties:
        updated:
          description: The last time the status of this Intersection was updated
          type: string
          format: date-time
        enabled:
          type: boolean
          description: True / False representing lit state of signal heads in intersection.
        timePaused:
          description: Is the countdown timer between phase changes for this
            intersection paused?
          type: boolean
        timeClearControl:
          description: Time in seconds between a control requests and when the traffic controller automatically clears that request. NTCIP 1202 Backup time. Setting to 0 disables automatic clearing of controls requests at this intersection.
          type: integer
        flash:
          type: boolean
          description: Boolean value representing if the intersection is in flash (night flash) mode.
        callVehicle:
          description: Active Vehicles calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        callPedestrian:
          description: Active Pedestrian calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        omit:
          description: Active Phase omits. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        hold:
          description: Active Green holds by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        forceOff:
          description: Active force off to red requests by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        pedestrianClear:
          description: Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        walkDont:
          description: Don't walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        walk:
          description: Walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "00100001"
        phases:
          type: array
          description: Status for each phase at time of last update
          items:
            type: object
            properties:
              phase:
                type: integer
                description: Phase ID number
              color:
                type: string
                description: The displayed color of the current Phase
                enum: [GREEN, RED, YELLOW]
              vehTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              vehTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              callVehicle:
                type: boolean
                description: A vehicle call has been placed for this phase.
              callPedestrian:
                type: boolean
                description: A pedestrian call has been placed for this phase.
              omit:
                type: boolean
                description: An omit has been placed for this phase.
              omitPedestrian:
                type: boolean
                description: A pedestrian omit has been placed for this phase.
              hold:
                type: boolean
                description: A hold has been placed for this phase.
              forceOff:
                type: boolean
                description: This phase has a force off active
              pedestrianClear:
                type: boolean
                description: Pedestrian clear is active
              walkDont:
                type: boolean
                description: DONT WALK sign is active
              walk:
                type: boolean
                description: WALK sign is active
    Railcrossing:
      type: object
      description: Describes a rail crossing within the facility. Non-instrumented
        crossings reject control requests.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this crosswalk
        uri:
          type: string
          description: The URI which can be used to access this rail crossing directly
        name:
          type: string
          description: A text based description of the rail crossing
        url:
          type: string
          description: A url with more information about this specific rail crossing
        longitude:
          type: number
          description: The longitude of the centroid of the rail crossing
        latitude:
          type: number
          description: The latitude of the centroid of the rail crossing
        instrument:
          type: string
          enum:
            - crossbuck
          nullable: true
          description: The signal type of rail crossing
        audible:
          type: boolean
          description: Is the rail crossing equipped with an audible warning
        gate:
          type: boolean
          description: Is the rail crossing equipped with a gate
        beacon:
          type: string
          enum:
            - wig-wag
            - flashing
          nullable: true
          description: The beacon type used for this rail crossing
        phases:
          type: array
          description: A list of supported phases
          nullable: true
          items:
            type: string
            enum:
              - presignal
              - closing
              - closed
              - opening
              - postsignal
              - open
        state:
          $ref: '#/components/schemas/RailcrossingState'
    RailcrossingState:
      type: object
      description: The current state of the rail crossing
      properties:
        manualCall:
          type: boolean
          description: Manual activation call placed, but has not been serviced.
        activated:
          type: boolean
          description: Is the rail crossing cycle activated
        phase:
          type: string
          description: The current phase of the rail crossing if instrumented
          enum:
            - presignal
            - closing
            - closed
            - opening
            - postsignal
            - open
          nullable: true
        gate:
          type: boolean
          description: True if the gate is down/in motion.
        audible:
          type: boolean
          description: True if audible tone is activated.
        beacon:
          type: boolean
          description: True if beacon is activated.
        updated:
          description: The last time the status of this rail crossing was updated
          type: string
          format: date-time
    Crosswalk:
      type: object
      description: Describes a crosswalk within the facility. Non-instrumented crosswalks
        can be created for discovery purposes, but will not allow for updates to
        status.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this crosswalk
        uri:
          type: string
          description: The URI which can be used to access this crosswalk directly
        name:
          type: string
          description: A text based description of this crosswalk
        url:
          type: string
          description: A url with more information about this specific crosswalk
        longitude:
          type: number
          description: The longitude of the centroid of the crosswalk
        latitude:
          type: number
          description: The latitude of the centroid of the crosswalk
        instrument:
          type: string
          enum:
            - solid
            - standard
            - continental
            - dashed
            - ladder
            - zebra
            - scramble
            - uk-pelican
            - uk-puffin
            - uk-toucan
            - uk-pegasus
          description: The painted line pattern for this crosswalk
        refuge:
          type: boolean
          description: Does the crosswalk have a central island pedestrian refuge
        beacon:
          type: string
          enum:
            - phb
            - belisha
            - signal
            - rapid-flash
          nullable: true
          description: The beacon type used for this crosswalk
        phases:
          type: array
          description: A list of valid phases for the crosswalk if equipped with a
            graphical display
          nullable: true
          items:
            type: string
            enum:
              - walk-text
              - do-not-walk-text
              - steady-upraised-hand
              - steady-walking-man
              - flashing-upraised-hand
        countdown:
          type: boolean
          description: Does the crosswalk feature an instrumented phase timer
        audible:
          type: boolean
          description: Is the crosswalk equipped with an audible warning for the
            crossing/countdown
        visor:
          type: string
          description: The type of visor installed on the beacon
          nullable: true
          enum:
            - egg-crate
            - tunnel
            - cap
        call-button:
          type: boolean
          description: Can a pedestrian place a call or trigger this crosswalk with a button
        tactile-surface:
          type: boolean
          description: Does the entrance to the crosswalk feature a tactile surface
        state:
          $ref: '#/components/schemas/CrosswalkState'
    CrosswalkState:
      type: object
      description: The current state of the crosswalk
      properties:
        pedestrianCall:
          type: boolean
          description: Pedestrian call placed, but has not been serviced.
        activated:
          type: boolean
          description: Is the crosswalk activated?
        phase:
          type: string
          description: The current phase of the crosswalk if instrumented
          enum:
            - walk-text
            - do-not-walk-text
            - steady-upraised-hand
            - steady-walking-man
            - flashing-upraised-hand
          nullable: true
        countdownTime:
          description: The time remaining in this crosswalk phase if instrumented.
          type: integer
        updated:
          description: The last time the status of this crosswalk was updated
          type: string
          format: date-time
    Gate:
      type: object
      description: Describes a gate within the facility. Non-instrumented gates can be
        created for discovery purposes, but will not allow for updates to
        status.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this gate
        uri:
          type: string
          description: The URI which can be used to access this gate directly
        name:
          type: string
          description: A text based description of this gate
        url:
          type: string
          description: A url with more information about this specific gate
        longitude:
          type: number
          description: The longitude of the centroid of the gate
        latitude:
          type: number
          description: The latitude of the centroid of the gate
        electric:
          type: boolean
          description: Is this a manual or electric gate
        arm:
          type: boolean
          description: Does this gate have an arm
        slide:
          type: boolean
          description: Does this gate slide to the side?
        swing:
          type: boolean
          description: Gate swings horizontally to open
        lift:
          type: boolean
          description: Gate lifts to open
        audible:
          type: boolean
          description: Gate has an audible alarm
        state:
          $ref: '#/components/schemas/GateState'
    GateState:
      type: object
      description: The current state of the gate
      properties:
        gateCall:
          type: boolean
          description: Gate open requested, but has not been serviced.
        activated:
          type: boolean
          description: Gate in motion
        open:
          type: boolean
          description: Is the gate open?
          nullable: true
        updated:
          description: The last time the status of this gate was updated
          type: string
          format: date-time
    Sensor:
      type: object
      description: A sensor or grouping of sensors located within the facility
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor directly
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
            - PACKAGE
            - CAMERA
            - LIDAR
            - RADAR
            - SONAR
            - WIRE
            - BEAM
            - SOFT
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer 
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        state:
          $ref: '#/components/schemas/SensorState'
    SensorCamera:
      type: object
      description: A camera sensor located within the facility
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
            - Camera
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer 
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        urlStream:
          type: string
          description: A URL for retrieving a stream of video from the camera.
        urlStill:
          type: string
          description: A URL allowing still capture from the camera.
        urlStreamFormat:
          type: string
          description: The file format of the stream endpoint.
        urlStillFormat:
          type: string
          description: The file format of the still endpoint.
        resolutionStream:
          type: string
          description: The maximum resolution of streaming video.
        resolutionStill:
          type: string
          description: The maximum resolution of still capture
        framerate:
          type: number
          description: The max number of frames achievable at max resolution.
        lens:
          type: string
          description: Detail about camera lens information.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorPackage:
      type: object
      description: A grouping of sensors located within the facility
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor package
        uri:
          type: string
          description: The URI which can be used to access this sensor package
        name:
          type: string
          description: A text based description of the sensor package
        url:
          type: string
          description: A url with more information about this specific sensor package
        longitude:
          type: number
          description: The longitude of the centroid of the sensor package
        latitude:
          type: number
          description: The latitude of the centroid of the sensor package
        type:
          type: string
          enum:
            - PACKAGE
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor package manufacturer 
        model:
          type: string
          description: The model number/name of the sensor package
        revision:
          type: string
          description: Sensor package revision number/edition information
        ipAddress:
          type: string
          description: The ip address of the sensor package
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor package
        cameras:
          type: array
          description: Cameras included in this sensor package
          items:
            $ref: '#/components/schemas/SensorCamera'
        lidars:
          type: array
          description: LIDARs included in this sensor package
          items:
            $ref: '#/components/schemas/SensorLIDAR'
        radars:
          type: array
          description: RADARs included in this sensor package
          items:
            $ref: '#/components/schemas/SensorRADAR'
        state:
          $ref: '#/components/schemas/SensorState'
    SensorRADAR:
      type: object
      description: A radar sensor located within the facility
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
            - RADAR
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer 
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        rangeMax:
          type: number
          description: The maximum range of the sensor.
        rangeAccuracy:
          type: number
          description: The accuracy range rating of the sensor.
        speedAccuracy:
          type: number
          description: The accuracy of speed detection of the sensor
        resolutionUpdateRate:
          type: number
          description: The rate at which the sensor updates.
        objectedTrackedMax:
          type: integer
          description: The maximum number of objects tracked by the sensor.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorLIDAR:
      type: object
      description: A LIDAR sensor located within the facility
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this sensor
        uri:
          type: string
          description: The URI which can be used to access this sensor
        name:
          type: string
          description: A text based description of the sensor
        url:
          type: string
          description: A url with more information about this specific sensor
        longitude:
          type: number
          description: The longitude of the centroid of the sensor
        latitude:
          type: number
          description: The latitude of the centroid of the sensor
        type:
          type: string
          enum:
            - LIDAR
          description: The sensor type
        manufacturer:
          type: string
          description: The sensor manufacturer 
        model:
          type: string
          description: The model number/name of the sensor
        revision:
          type: string
          description: Sensor revision number/edition information
        ipAddress:
          type: string
          description: The IP Address of the sensor
        urlWebInterface:
          type: string
          description: A URL allowing control or management of the sensor
        rangeTypical:
          type: number
          description: The typical range of the sensor.
        accuracyTypical:
          type: number
          description: The typical accuracy of the sensor.
        resolutionAngularDegree:
          type: number
          description: The max angular resolution of this LIDAR.
        resolutionDistance:
          type: number
          description: The resolution at max distance of this LIDAR.
        beamCount:
          type: integer
          description: The number of beams this LIDAR uses for sensing.
        fovHorizontalDegree:
          type: number
          description: The horizontal FOV of this sensor.
        fovVerticalDegree:
          type: number
          description: The vertical FOV of this sensor.
        state:
          $ref: '#/components/schemas/SensorState'
    SensorState:
      type: object
      description: The current state of a sensor or sensor housing.
      properties:
        enabled:
          type: boolean
          description: True / False representing if the sensor presently powered on.
        updated:
          description: The last time the state of the sensor was updated.
          type: string
          format: date-time
    Facility:
      type: object
      description: Describes the facility.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this Facility
        uri:
          type: string
          description: The URI which can be used to access this facility directly
        name:
          type: string
          description: A text based description of this facility
        url:
          type: string
          description: A url with more information about this facility
        urlMap:
          type: string
          description: A url with to a facility map
        longitude:
          type: number
          description: The longitude of the centroid of the facility
        latitude:
          type: number
          description: The latitude of the centroid of the facility
        contactMaintenance:
          type: string
          description: Facility Maintenance contact
        contactReservations:
          type: string
          description: Facility Reservation Contact
        contactManager:
          type: string
          description: Facility Manager Contact
        contactTechnical:
          type: string
          description: Facility Technical Contact
        contactEmergency:
          type: string
          description: Facility Emergency Contact
        unitDistance:
          type: string
          description: Facility Unit for Distance
        unitMass:
          type: string
          description: Facility Unit for Mass
    V2X:
      type: object
      description: Describes for a V2X (Vehicle to Everything) connected device within the facility. 
        status.
      required:
        - id
      properties:
        id:
          type: string
          description: An ID number identifying this V2X device
        uri:
          type: string
          description: The URI which can be used to access this V2X device directly
        name:
          type: string
          description: A text based description of this V2X device
        url:
          type: string
          description: A url with more information about this specific V2X device
        longitude:
          type: number
          description: The longitude of the centroid of the V2X device, if fixed.
        latitude:
          type: number
          description: The latitude of the centroid of the V2X device, if fixed.
        type:
          type: string
          enum: [OBU, RSU]
        radiosSupported:
          type: array
          description: A list of supported configurations for this device.
          items:
            type: object
            properties:
              radio:
                description: Radio Type
                type: string
                enum: [DSRC, CV2X]
              messageSet:
                type: string
                enum: [NTCIP, J2735_200612, J2735_200911, J2375_201509, J2375_201601, J2375_201603]
        messageTypes:
          type: string
          enum: [BSM, SPaT, MAP, TIM]
        manufacturer:
          type: string
          description: The OBU/RSU manufacturer 
        model:
          type: string
          description: The OBU/RSU model
        revision:
          type: string
          description: Revision of the OBU/RSU
        vehicleManufacturer:
          type: string
          description: Manufacturer of vehicle
        vehicleModel:
          type: string
          description: Model of vehicle
        vehicleYear:
          type: string
          description: Release year of Vehicle.
        state:
          type: object
          description: The current state of the V2X device
          properties:
            enabled:
              type: boolean
              description: Is the radio on or off?
            radiosEnabled:
              type: array
              description: A list of enabled configurations for this device.
              items:
                type: object
                properties:
                  radio:
                    description: Radio Type
                    type: string
                    enum: [DSRC, CV2X]
                  messageSet:
                    type: string
                    enum: [NTCIP, J2735_200612, J2735_200911, J2375_201509, J2375_201601, J2375_201603]
            updated:
              description: The last time the status of this device was updated.
              type: string
              format: date-time
            received:
              description: The last time the API received a message from this device.
              type: string
              format: date-time
            longitude:
              type: number
              description: The last known longitude of the V2X device, if movable.
            latitude:
              type: number
              description: The last known latitude of the V2X device, if movable.
    V2XSPaT:
      type: object
      description: Signal Phase and Timing V2X Message decoded.
      properties:
        id:
          description: Identifier given for the intersection this message is related to.
          type: string
        messageSet:
          description: The original format this message was broadcast in before decoding.
          type: string
          enum: [NTCIP, J2735_200612, J2735_200911, J2375_201509, J2375_201601, J2375_201603]
        updated:
          description: The date time of this message was parsed.
          type: string
          format: date-time
        timeSystem:
          description: System reported time represented as seconds.milliseconds
          type: string
        green:
          description: Phases which are Green. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        yellow:
          description: Phases which are Yellow. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        red:
          description: Phases which are Red. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        pedestrianClear:
          description: Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        walkDont:
          description: Don't walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        walk:
          description: Walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        flash:
          description: Flashing indicator by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)
          type: string
          example: "0000000000100001"
        phases:
          type: array
          description: Information about each Phase
          items:
            type: object
            properties:
              phase:
                type: integer
                description: Phase ID number
              color:
                type: string
                description: The displayed color of the current Phase
                enum: [GREEN, RED, YELLOW]
              flash:
                type: boolean
                description: Is the signal flashing?
              vehTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              vehTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              pedTimeMin:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
              pedTimeMax:
                type: number
                description: Minimum time (seconds) until next phase for vehicle.
    V2XRaw:
      type: object
      description: A raw message delivered from a V2X Device.
      properties:
        id:
          description: Identifier, if known of the transmitting RSU or OBU.
          type: string
        messageSet:
          description: The format, if known, this message is broadcast in.
          type: string
          enum: [NTCIP, J2735_200612, J2735_200911, J2375_201509, J2375_201601, J2375_201603]
        updated:
          description: The date and time this message was broadcast by OCTANE.
          type: string
          format: date-time
        data:
          description: The raw payload of the message, HEX encoded.
          type: string
          example: "0000000000100001"
    V2XBSM:
      type: object
      description: Basic Safety Message received from an OBU.
      properties:
        id:
          description: Static identifier if available, else temporary identifier provided by OBU.
          type: string
        idTemporary:
          description: Temporary identifier
          type: string
        idFixed:
          description: Permanent vehicle identifier for known vehicles.
          type: string
        messageSet:
          description: The original format this message was broadcast in before decoding.
          type: string
          enum: [J2735_200612, J2735_200911, J2375_201509, J2375_201601, J2375_201603]
        vehicleLength:
          description: Vehicle length in Meters
          type: number
        vehicleWidth:
          description: Vehicle width in Meters
          type: number
        updated:
          description: The date time this message was sent via OCTANE.
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the transmitting V2X device.
        latitude:
          type: number
          description: Latitude of the transmitting V2X device.
        elevation:
          type: number
          description: Elevation of transmitting V2X device. Units increments of 0.1 m
        speed:
          type: number
          description: Reported Velocity of V2X Device. Units increment of 0.02 m/s
        heading:
          type: number
          description: 0 to 359.9875 degrees.
        angle:
          type: number
          description: 0 is true north. 1.5 degree increments.
    APIError:
      type: object
      properties:
        internalCode:
          type: integer
          format: int32
          description: The internal error code encountered by the API
        status:
          type: integer
          description: The HTTP error code returned with this error object.
        message:
          type: string
          description: The error message encountered
        humanMessage:
          type: string
          description: A human readable HTTP error code
    Scenario:
      type: object
      properties:
        id:
          type: string
          description: ID of the scenario
        name:
          type: string
          description: Name of the scenario
        owner:
          type: string
          description: Email of the scenario owner
        workspace:
          type: string
          description: The XML structure containing the code to be run in the scenario
        lastModified:
          type: string
          format: date-time
          description: Time that the scenario was last modified